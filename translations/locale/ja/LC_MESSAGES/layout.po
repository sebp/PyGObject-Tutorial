# Japanese translation for layout.txt in PyGObject-Tutorial.
# Copyright (C) GNU Free Documentation License 1.3
# This file is distributed under the same license as the Python GTK+ 3 Tutorial package.
# Takeshi AIHANA <takeshi.aihana@gmail.com>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Python GTK+ 3 Tutorial 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-24 13:17\n"
"PO-Revision-Date: 2012-10-07 08:45+0900\n"
"Last-Translator: Takeshi AIHANA <takeshi.aihana@gmail.com>\n"
"Language-Team: Japanese <takeshi.aihana@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/layout.txt:4
# 85b1e0a25dae4b38853920f26a251cb6
msgid "Layout Containers"
msgstr "レイアウト用のコンテナ"

#: ../source/layout.txt:5
# e4fad19f97a74303aa981e19f5df0b7b
msgid "While many GUI toolkits require you to precisely place widgets in a window, using absolute positioning, GTK+ uses a different approach. Rather than specifying the position and size of each widget in the window, you can arrange your widgets in rows, columns, and/or tables. The size of your window can be determined automatically, based on the sizes of the widgets it contains. And the sizes of the widgets are, in turn, determined by the amount of text they contain, or the minimum and maximum sizes that you specify, and/or how you have requested that the available space should be shared between sets of widgets. You can perfect your layout by specifying padding distance and centering values for each of your widgets. GTK+ then uses all this information to resize and reposition everything sensibly and smoothly when the user manipulates the window."
msgstr "多くの GUI ツールキットがウィンドウの中に任意のウィジェットを正確に配置するために絶対座標を要求してくる一方で、GTK+ では別のアプローチを採用しています。ウィンドウの中に配置するいろいろなウィジェットに対して位置と大きさをぞれぞれ指定する代わりに、行や列、そして/あるいはテーブルの類にウィジェットを配置していくとができます。ウィンドウの大きさは、その中に配置しているいろいろなウィジェットの大きさに基づいて自動的に計算させることが可能です。さらにウィンドウの中にあるウィジェットの大きさは、それらのウィジェットが格納している文字列の長さとか、明示的に指定した最小値と最大値から計算するとか、もしくはウィンドウの中で利用できる領域を複数のウィジェットの間で共有するよう要求することができるようになっています。ウィジェットとウィジェットの間隔や均等配置などを指定することでレイアウトを完成させていくことができます。それから、GTK+ はこれらのレイアウト情報を全て利用して、ユーザがウィンドウを操作したら、賢く滑らかにその大きさを変更したり配置を更新します。"

#: ../source/layout.txt:19
# 2445b1bca09f4c938215ae9c4aa493a1
msgid "GTK+ arranges widgets hierarchically, using *containers*. They are invisible to the end user and are inserted into a window, or placed within each other to layout components. There are two flavours of containers: single-child containers, which are all descendants of :class:`Gtk.Bin`, and multiple-child containers, which are descendants of :class:`Gtk.Container`. The most commonly used are vertical or horizontal boxes (:class:`Gtk.Box`), tables (:class:`Gtk.Table`) and grids (:class:`Gtk.Grid`)."
msgstr "GTK+ は *コンテナ* を使っていろいろなウィジェットを階層的に配置していきます。ユーザにはコンテナは見えません。コンテナはウィンドウに埋め込まれるか、別のコンテナの中に配置されます。コンテナには二種類あります: 子を一つだけ配置できるタイプのコンテナは全て :class:`Gtk.Bin` クラスから派生しています。複数の子を配置できるコンテナは :class:`Gtk.Container` クラスから派生しています。もっともよく利用するのは垂直と水平のボックス (:class:`Gtk.Box`)、テーブル (:class:`Gtk.Table`)、そして格子 (:class:`Gtk.Grid`) です。"

#: ../source/layout.txt:29
# f425a7019e2f41469490954b8c096f84
msgid "Boxes"
msgstr "ボックス"

#: ../source/layout.txt:31
# 0a850d3cd10649ecb938fe1f92e09945
msgid "Boxes are invisible containers into which we can pack our widgets. When packing widgets into a horizontal box, the objects are inserted horizontally from left to right or right to left depending on whether :meth:`Gtk.Box.pack_start` or :meth:`Gtk.Box.pack_end` is used. In a vertical box, widgets are packed from top to bottom or vice versa. You may use any combination of boxes inside or beside other boxes to create the desired effect."
msgstr "ボックスは見えないコンテナの一つで、いろいろなウィジェットを詰め込む (パッキングする) ことができます。水平ボックスの中にウィジェットをパッキングしていくと、それらのオブジェクトは左から右へ、または右から左へ横方向に並べられていきます (並べられていく向きは :meth:`Gtk.Box.pack_start` または :meth:`Gtk.Box.pack_end` 関数で指定した向きに依存します)。垂直ボックスの場合、ウィジェットは上から下へ、またはその逆向きに縦方向に並べられていきます。ボックスを他のボックスの中にパッキングしたり、別のボックスの横に並べる等してお望みのレイアウトを実現できます。"

#: ../source/layout.txt:40
# c4fa099c0792482689d5e9d21e02000b
msgid "Box Objects"
msgstr "ボックスのオブジェクト"

#: ../source/layout.txt:44
# cdafd7a8997d4f8a921bf36c2f1794d5
msgid "The rectangular area of a :class:`Gtk.Box` is organized into either a single row or a single column of child widgets depending upon whether the \"orientation\" property is set to :attr:`Gtk.Orientation.HORIZONTAL` or :attr:`Gtk.Orientation.VERTICAL`."
msgstr ":class:`Gtk.Box` の矩形領域は、\"orientation\" プロパティの内容 (:attr:`Gtk.Orientation.HORIZONTAL` または :attr:`Gtk.Orientation.VERTICAL`) に応じて複数の子ウィジェットを一行または一列の中に並べていきます。"

#: ../source/layout.txt:49
# 290bc44b97454683a76ccb3709dd7cef
msgid "If *homogeneous* is ``True``, all widgets in the box will be the same size, of which the size is determined by the largest child widget. If it is omitted, *homogeneous* defaults to ``False``."
msgstr "*homogeneous* というプロパティを ``True`` にすると、ボックス内の全ての子ウィジェットが同じ大きさになります (一番大きな子ウィジェットの大きさに合わせられます)。このプロパティの指定を省略すると、 *homogeneous* の内容はデフォルト値の ``False`` になります。"

#: ../source/layout.txt:53
# 8df2488e42924522b2cce23ffbaea0d3
msgid "*spacing* is the number of pixels to place by default between children. If omitted, no spacing is used, i.e. *spacing* is set to 0."
msgstr "*spacing* というプロパティは子ウィジェットの間隔をピクセル単位で指定します。省略すると間隔がなくなります (すなわち *spacing* が 0 になります)。"

#: ../source/layout.txt:56
# 3ca04d0052d84ef8920a4db2a75c3a97
msgid "By default, child widgets are organized into a single row, i.e. the \"orientation\" property is set to :attr:`Gtk.Orientation.HORIZONTAL`."
msgstr "デフォルトで、子ウィジェットは一行の中に並べられるようになっています。すなわち、\"orientation\" プロパティは :attr:`Gtk.Orientation.HORIZONTAL` になります。"

#: ../source/layout.txt:59
# 9d7030882e154c0283868d266e30cf8e
msgid ":class:`Gtk.Box` uses a notion of *packing*. Packing refers to adding widgets with reference to a particular position in a :class:`Gtk.Container`. For a :class:`Gtk.Box`, there are two reference positions: the start and the end of the box. If \"orientation\" is :attr:`Gtk.Orientation.VERTICAL`, the start is defined as the top of the box and the end is defined as the bottom. If \"orientation\" is :attr:`Gtk.Orientation.HORIZONTAL`, the start is defined as the left side and the end is defined as the right side."
msgstr ":class:`Gtk.Box` は *パッキング* の記法を使用します。パッキングは :class:`Gtk.Container` の特定の位置 (リファレンス位置) に関してウィジェットを追加していくことを指示します。 :class:`Gtk.Box` の場合、リファレンス位置は二つあります。それはボックスの先頭と末尾です。\"orientation\" が :attr:`Gtk.Orientation.VERTICAL` の場合、先頭はボックスの上端で、末尾は下端になります。また、\"orientation\" が :attr:`Gtk.Orientation.HORIZONTAL` の場合、先頭は左端で、末尾が右端になります。"

#: ../source/layout.txt:70
# 740656ccc0a14ca487cdbfb83548610e
msgid "Adds *child* to box, packed with reference to the start of box. The *child* is packed after any other child packed with reference to the start of box."
msgstr "*child* を、ボックスの先頭をリファレンス位置としてパッキングしながら追加します。 *child* は、ボックスの先頭にパッキングされたその他の子ウィジェットの後に追加されていきます。"

#: ../source/layout.txt:74
# 1d85accfefd34fa38852a3cc2b4849b8
msgid "*child* should be a :class:`Gtk.Widget` to be added to this box. The *expand* argument when set to ``True`` allows the *child* widget to take all available space it can. Alternately, if the value is set to ``False``, the box will be shrunken to the same size as the child widget."
msgstr "*child* は、このボックスに追加する一個の :class:`Gtk.Widget` です。 *expand* を ``True`` にすると *child* はボックス内で利用できる空間を全て占有します。逆に ``False`` にすると、ボックスが *child* と同じ大きさに縮まります。"

#: ../source/layout.txt:79
# 4c4f56df62c94902a390acb6915af629
msgid "If the *fill* argument is set to ``True``, the *child* widget takes all available space and is equal to the size of the box. This only has an effect when *expand* is set to ``True``. A child is always allocated the full height of a horizontally oriented and the full width of a vertically oriented box. This option affects the other dimension."
msgstr "*fill* を ``True`` にすると *child* は利用できる空間を全て占有し、ボックスと同じ大きさになります。これは *expand* を ``True`` にした時にだけ効果があります。 *child* は常に水平ボックスと同じ高さを持ち、垂直ボックスと同じ幅を持ちます。このオプションは他の次元でも効果があります。"

#: ../source/layout.txt:86
# a68ce9d52c5647dabc050267881a52e7
msgid "*padding* defines extra space in pixels to put between this child and its neighbours, over and above the global amount specified by \"spacing\" property. If *child* is a widget at one of the reference ends of box, then padding pixels are also put between *child* and the reference edge of this box."
msgstr "*padding* は、子ウィジェットとその横にあるウィジェットとの間に挿入する余白をピクセル単位で指定します (その際は、ボックス生成時に指定した *spacing* というプロパティの値と加算されます)。 *child* がボックスの末尾に配置されたウィジェットの場合 *padding* に指定した余白がその *child* とボックスの終端との間にも挿入されます。"

#: ../source/layout.txt:94
# 4ae744bb6086434fbf8437fba39dc137
msgid "Adds *child* to box, packed with reference to the end of box. The *child* is packed after (away from end of) any other child packed with reference to the end of box."
msgstr "*child* を、ボックスの終端をリファレンス位置としてパッキングしながら追加します。 *child* はボックスの末尾にパッキングされたその他の子ウィジェットの前に (ボックスの先頭に向かって) 追加されていきます。"

#: ../source/layout.txt:98
# b0cb06ae537e4347bce05d031b102b09
msgid "Arguments are the same as for :meth:`pack_start`."
msgstr "引数は :meth:`Gtk.Box.pack_start` 関数と同じです。"

#: ../source/layout.txt:102
# 6f40f8bc1a8344ad8e7457bba5b3f01a
msgid "If *homogeneous* is ``True``, all widgets in the box will be the same size, of which the size is determined by the largest child widget."
msgstr "*homogeneous* を ``True`` にすると、ボックス内の全ての子ウィジェットは同じ大きさになります (一番大きな子ウィジェットの大きさに合わせられます)。"

#: ../source/layout.txt:107
#: ../source/layout.txt:177
#: ../source/layout.txt:277
# d71d8b7eb2a2406e8379fdff80319326
# bd9158399f854aa2a3ca005e4bb3da67
# 7d438b6e0a91417697ba143b0110f794
msgid "Example"
msgstr "例"

#: ../source/layout.txt:109
# d3e284b61bb2405bb9600f307044da9c
msgid "Let's take a look at a slightly modified version of the extended example with two buttons."
msgstr "前述のちょっと高度な例を少し変更し二つのボタンを持つアプリケーションをみていくことにしましょう。"

#: ../source/layout.txt:117
# ab132aa15007447d99390a5895ce3727
msgid "First, we create a horizontally orientated box container where 6 pixels are placed between children. This box becomes the child of the top-level window."
msgstr "まず最初に、水平方向のボックス型のコンテナを一つ生成します。このボックスの中で子ウィジェットは 6 ピクセル毎に配置されるようにします。個のボックスはトップレベル・ウィンドウの子になります。"

#: ../source/layout.txt:123
# bdbe6f047c684445a418010165c84054
msgid "Subsequently, we add two different buttons to the box container."
msgstr "その次に、このボック型のコンテナにボタンを二つ追加していきます。"

#: ../source/layout.txt:128
# 8da77c5704404585a3ccb748735a482a
msgid "While with :meth:`Gtk.Box.pack_start` widgets are positioned from left to right, :meth:`Gtk.Box.pack_end` positions them from right to left."
msgstr ":meth:`Gtk.Box.pack_start` メソッドを使うとウィジェットを左から右に配置していくのに対し :meth:`Gtk.Box.pack_end` メソッドは右から左へウィジェットを配置します。"

#: ../source/layout.txt:132
# 7e94e8efef4041f4b8d2d635927c719c
msgid "Grid"
msgstr "グリッド"

#: ../source/layout.txt:133
# db7fe55787bf43caaf0e566f1d7cd984
msgid ":class:`Gtk.Grid` is a container which arranges its child widgets in rows and columns, but you do not need to specify the dimensions in the constructor. Children are added using :meth:`Gtk.Grid.attach`. They can span multiple rows or columns. It is also possible to add a child next to an existing child, using :meth:`Gtk.Grid.attach_next_to`."
msgstr ":class:`Gtk.Grid` は子ウィジェットを格子の中に配置することができるコンテナの一つですが、コンストラクタで格子の次元 (行数×列数) を指定する必要はありません。子ウィジェットは :meth:`Gtk.Grid.attach` メソッドを使って追加します。子ウィジェットを複数の行や列をまたいで配置することもできます。さらに :meth:`Gtk.Grid.attach_next_to` メソッドを使うと、位置を指定せずに既存のウィジェットを指定してその隣に子ウィジェットを配置することもできます。"

#: ../source/layout.txt:139
# f6c7413a6a3b45d982d7f9e9cb09c37f
msgid ":class:`Gtk.Grid` can be used like a :class:`Gtk.Box` by just using :meth:`Gtk.Grid.add`, which will place children next to each other in the direction determined by the \"orientation\" property (defaults to :attr:`Gtk.Orientation.HORIZONTAL`)."
msgstr ":class:`Gtk.Grid` は :meth:`Gtk.Grid.add` メソッドを利用すると :class:`Gtk.Box` のように、\"orientation\" プロパティの値 (デフォルトは :attr:`Gtk.Orientation.HORIZONTAL`) によって決定される向きに子ウィジェットを並べていくことができます。"

#: ../source/layout.txt:145
# f7b6a047198c4ffb9306cdc93f65c976
msgid "Grid Objects"
msgstr "グリッドのオブジェクト"

#: ../source/layout.txt:148
# a81f04787bc6482980087974db07baa9
msgid "Creates a new grid widget."
msgstr "新しいグリッドのオブジェクトを生成します。"

#: ../source/layout.txt:152
# cf2303e7ef124aa9bbd1547ec772289f
msgid "Adds *child* to this grid."
msgstr "このグリッドに *child* を追加します。"

#: ../source/layout.txt:154
# f75e49c6e5ce49c7b7ec7dc7714bbcf3
msgid "The position of *child* is determined by the index of the cell left to it (*left*) and above of it (*top*). The number of 'cells' that *child* will occupy is determined by *width* and *height*."
msgstr "*child* の位置はその左側 (*left*) と上側 (*top*) のセルの番号で決まります。 *child* が占有するセルの個数は *width* と *height* で決まります。"

#: ../source/layout.txt:160
# b2955fcfaf454cd6947ec5bf45c0f2aa
msgid "Adds *child* to this grid, next to *sibling*. *side* is the side of *sibling* that *child* is positioned next to. It can be one of"
msgstr "このグリッドの *sibling* の隣に *child* を追加します。 *side* は *child* を配置する *sibling* の側を、次のいづれかで指定します::"

#: ../source/layout.txt:163
# 48b747ce77944002983d7b95261fa235
msgid ":attr:`Gtk.PositionType.LEFT`"
msgstr ":attr:`Gtk.PositionType.LEFT`"

#: ../source/layout.txt:164
# 759a8bbbd0c44e9e9afa3f50de7946a0
msgid ":attr:`Gtk.PositionType.RIGHT`"
msgstr ":attr:`Gtk.PositionType.RIGHT`"

#: ../source/layout.txt:165
# e254d5f045754045b1e4faa603954a02
msgid ":attr:`Gtk.PositionType.TOP`"
msgstr ":attr:`Gtk.PositionType.TOP`"

#: ../source/layout.txt:166
# feafe31bb08549f38ea0f20d0f8bd6d5
msgid ":attr:`Gtk.PositionType.BOTTOM`"
msgstr ":attr:`Gtk.PositionType.BOTTOM`"

#: ../source/layout.txt:168
# ebcea3b8dd0d4aa3945bdf6856bd7459
msgid "*width* and *height* determine the number of 'cells' that *child* will occupy."
msgstr "*child* が占有するセルの個数は *width* と *height* で決まります。"

#: ../source/layout.txt:173
# 7498fc5d253746dab650d3d21dc4e298
msgid "Adds *widget* to this grid in the direction determined by the \"orientation\" property."
msgstr "このグリッドで \"orientation\" のプロパティが指定した向きに *widget* を追加していきます。"

#: ../source/layout.txt:185
# 17c00f23089742c7820bca83d9ba747c
msgid "Table"
msgstr "テーブル"

#: ../source/layout.txt:187
# 097363a7d43b468483ba72000dc161a0
msgid "Tables allows us to place widgets in a grid similar to :class:`Gtk.Grid`."
msgstr "テーブルを使うと :class:`Gtk.Grid` に似た格子 (セル) 状のボックスの中にいろいろなウィジェットを配置できます。"

#: ../source/layout.txt:189
# ca501b81667643eebee2cc8e33d6e9fa
msgid "The grid's dimensions need to be specified in the :class:`Gtk.Table` constructor. To place a widget into a box, use :meth:`Gtk.Table.attach`."
msgstr "格子の次元 (行数×列数) は :class:`Gtk.Table` クラスのコンストラクタの中で指定する必要があります。そのボックスの中にウィジェットを一つ配置する時は :meth:`Gtk.Table.attach` メソッドを使用します。"

#: ../source/layout.txt:192
# 38fb8881b2564d05a90d088969d98389
msgid ":meth:`Gtk.Table.set_row_spacing` and :meth:`Gtk.Table.set_col_spacing` set the spacing between the rows at the specified row or column. Note that for columns, the space goes to the right of the column, and for rows, the space goes below the row."
msgstr ":meth:`Gtk.Table.set_row_spacing` と :meth:`Gtk.Table.set_col_spacing` といったメソッドは、指定した行または列にある行間または列間に挿入する余白の大きさを指定します。ここで、列間の場合の余白は列の右側に付与され、行間の場合の余白は行の下側に付与される点に注意して下さい。"

#: ../source/layout.txt:197
# 7e9b15e0b05545bd9cbe209a3130ea0e
msgid "You can also set a consistent spacing for all rows and/or columns with :meth:`Gtk.Table.set_row_spacings` and :meth:`Gtk.Table.set_col_spacings`. Note that with these calls, the last row and last column do not get any spacing."
msgstr "さらに :meth:`Gtk.Table.set_row_spacings` と :meth:`Gtk.Table.set_col_spacings` メソッドを使って全ての行または列の間に一定サイズの余白を挿入することもできます。その場合、最後の行と最後の列には余白が付与されない点に注意して下さい。"

#: ../source/layout.txt:202
# 0e7a63d0579744888d853034bea7517e
msgid "Table Objects"
msgstr "テーブルのオブジェクト"

#: ../source/layout.txt:209
# 118549773a3248f8b30207a7b6d60007
msgid "The first argument is the number of rows to make in the table, while the second, obviously, is the number of columns. If *homogeneous* is ``True``, the table cells will all be the same size (the size of the largest widget in the table)."
msgstr "一番目の引数はテーブルの行数で、次の引数は、お分かりのとおり、テーブルの列数です。 *homogeneous* を ``True`` にすると、テーブルの中の格子が全て同じ大きさになります (テーブルの中で一番大きなウィジェットの大きさに合わせられます)。"

#: ../source/layout.txt:216
# 0994e2c9a404449293a5c0c37d6ac1ad
msgid "Adds a widget to a table."
msgstr "一個のウィジェットをテーブルの任意の場所に追加します。"

#: ../source/layout.txt:218
# 99c3fb666c2d4eac9c560c059f6f75da
msgid "*child* is the widget that should be added to the table. The number of 'cells' that a widget will occupy is specified by *left_attach*, *right_attach*, *top_attach* and *bottom_attach*. These each represent the leftmost, rightmost, uppermost and lowest column and row numbers of the table. (Columns and rows are indexed from zero)."
msgstr "*child* はテーブルに追加するウィジェットです。任意のウィジェットが占有する「セル」の番号を *left_attach* と *right_attach* と *top_attach* と *bottom_attach* で指定します。これらはそれぞれテーブル上の左端、右端、上端、下端の列番号と行番号を表します (列番号と行番号は共に 0 から始まる整数値です)。"

#: ../source/layout.txt:225
# a37ea1446ef8410e85111a5cfaa7e35e
msgid "For example, if you want a button in the lower-right cell of a 2 x 2 table, and want it to occupy that cell only, then the code looks like the following."
msgstr "例えば、2×2 の大きさを持つテーブルの右下隅にあるセルにボタンをパッキングし、そのセルだけ占有したい場合のコードは次のようになります"

#: ../source/layout.txt:235
# 7bb2feb945da4b5ea796b763840eb37d
msgid "If, on the other hand, you wanted a widget to take up the entire top row of our 2 x 2 table, you'd use"
msgstr "また、その一方でウィジェットを同じ 2×2 のテーブルの先頭行一杯にパッキングしたい場合のコードは次のようになります。"

#: ../source/layout.txt:242
# 44bdae5accee496c9edb429a7bafb5c3
msgid "*xoptions* and *yoptions* are used to specify packing options and may be bitwise ORed together to allow multiple options. These options are:"
msgstr "*xoptions* と *yoptions* はパッキング時のオプションを指定する際に使用します。複数のオプションをビット単位の論理和 (OR) を使って表現できます。利用可能なオプションは次のとおりです::"

#: ../source/layout.txt:245
# 5a7385a5175547e3a2ff2cd5046fb08f
msgid ":attr:`Gtk.AttachOptions.EXPAND`: The widget should expand to take up any extra space in its container that has been allocated."
msgstr ":attr:`Gtk.AttachOptions.EXPAND`: ウィジェットは確保されたコンテナの中にある全ての領域を占有するために広がる"

#: ../source/layout.txt:247
# a7e7efc4415b4cecb042ab4dc580d25b
msgid ":attr:`Gtk.AttachOptions.FILL`: The widget will expand to use all the room available."
msgstr ":attr:`Gtk.AttachOptions.FILL`: ウィジェットは利用可能なセルを使うために広がる"

#: ../source/layout.txt:249
# 052cbd3308d44d7dbdd9b8d266a7ad6f
msgid ":attr:`Gtk.AttachOptions.SHRINK`: Reduce size allocated to the widget to prevent it from moving off screen."
msgstr ":attr:`Gtk.AttachOptions.SHRINK`: ウィジェットが画面から消えてしまわないよう小さくする"

#: ../source/layout.txt:252
# e8bf9fc7f85848f4a8fad0dbcecee896
msgid "If omitted, *xoptions* and *yoptions* defaults to ``Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL``."
msgstr "このオプションを省略すると *xoptions* と *yoptions* はデフォルトの ``Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL`` になります。"

#: ../source/layout.txt:255
# 18031e82a2d14264bbcb71693b2f2533
msgid "Finally, the padding arguments work just as they do for :meth:`Gtk.Box.pack_start`. If omitted, *xpadding* and *ypadding* defaults to ``0``."
msgstr "最後の *xpadding* と *ypadding* は :meth:`Gtk.Box.pack_start` メソッドに渡す *padding* 引数と同じ働きをします。これらを省略すると *xpadding* と *ypadding* はデフォルト値の 0 になります。"

#: ../source/layout.txt:261
# 61c0ee71b85b4cc8b684b5a00ae594b3
msgid "Changes the space between a given table row and the subsequent row."
msgstr "指定した *row* とその下の行との間隔を変更します。"

#: ../source/layout.txt:265
# 3584bf1fcd284f6493abd23b194925e8
msgid "Alters the amount of space between a given table column and the following column."
msgstr "指定した *col* とその隣にある列との間隔を変更します。"

#: ../source/layout.txt:270
# 30b8114bca4c4e248b92f5ba5d25fe21
msgid "Sets the space between every row in this table equal to *spacing*."
msgstr "このテーブルの中にある全ての行の間隔を *spacing* に変更します。"

#: ../source/layout.txt:274
# b86d1d80bb1c4a349f3ace1e45291803
msgid "Sets the space between every column in this table equal to *spacing*."
msgstr "このテーブルの中にある全ての列の間隔を *spacing* に変更します。"

