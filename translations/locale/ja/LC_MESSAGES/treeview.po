# Japanese translation for treeview.txt in PyGObject-Tutorial.
# Copyright (C) GNU Free Documentation License 1.3
# This file is distributed under the same license as the Python GTK+ 3 Tutorial package.
# Takeshi AIHANA <takeshi.aihana@gmail.com>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Python GTK+ 3 Tutorial 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-09-24 13:17\n"
"PO-Revision-Date: 2012-10-16 09:35+0900\n"
"Last-Translator: Takeshi AIHANA <takeshi.aihana@gmail.com>\n"
"Language-Team: Japanese <takeshi.aihana@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/treeview.txt:2
# 8446193de2d843cba5544b179a656d67
msgid "Tree and List Widgets"
msgstr "ツリーとリスト・ウィジェット"

#: ../source/treeview.txt:4
# 45a487250d784d2f8ddd79cba16abaf7
msgid "A :class:`Gtk.TreeView` and its associated widgets are an extremely powerful way of displaying data. They are used in conjunction with a :class:`Gtk.ListStore` or :class:`Gtk.TreeStore` and provide a way of displaying and manipulating data in many ways, including:"
msgstr ":class:`Gtk.TreeView` とそれに関連するウィジェットらはデータを表示するのに極めて有効なインタフェースの一つです。これらのウィジェットは :class:`Gtk.ListStore` または :class:`Gtk.TreeStore` クラスと連携して使用し、次に示すようにデータを表示する方法やデータを扱う方法を何通りも提供してくれます:"

#: ../source/treeview.txt:9
# 9e0e771a1dab4356baf0dc42b81ae207
msgid "Automatically updates when data added, removed or edited"
msgstr "データを追加したり、削除したり、編集すると自動的に表示を更新する"

#: ../source/treeview.txt:10
# d55ae6326f6c4446aa10519b5e48dd5a
msgid "Drag and drop support"
msgstr "データのドラッグ＆ドロップをサポートする"

#: ../source/treeview.txt:11
# c2c3787c61c54c479a044b2c37f63b3a
msgid "Sorting of data"
msgstr "データの並び替えをサポートする"

#: ../source/treeview.txt:12
# e7ad3477c57946a295d3526653c8a8d9
msgid "Support embedding widgets such as check boxes, progress bars, etc."
msgstr "チェックボックスやプログレスバーなどのウィジェットの埋め込みをサポートする"

#: ../source/treeview.txt:13
# 417fcf350c0d4ba8a53a5e99214338ab
msgid "Reorderable and resizable columns"
msgstr "データを格納するカラムの順番を変えたり大きさを変えることができる"

#: ../source/treeview.txt:14
# e13ed4fb4f9d4319808fdb9868eb258b
msgid "Filtering of data"
msgstr "データをフィルタリングできる"

#: ../source/treeview.txt:16
# 70edc1d1d1ae4e84b5c01578a0f4de02
msgid "With the power and flexibility of a :class:`Gtk.TreeView` comes complexity. It is often difficult for beginner developers to be able to utilize correctly due to the number of methods which are required."
msgstr "しかしながら :class:`Gtk.TreeView` クラスが持つ多くの機能と柔軟性は複雑さをもたらします。これらの機能を実現するにはたくさんのメソッドが必要になるため、まれに初心者にとって正しく使いこなすのが難しいものになっています。"

#: ../source/treeview.txt:21
# 9efe8b05b6df4540b9810d19c7398079
msgid "The Model"
msgstr "モデル"

#: ../source/treeview.txt:22
# 372a02d749604e908ac12a921bd348a2
msgid "Each :class:`Gtk.TreeView` has an associated :class:`Gtk.TreeModel`, which contains the data displayed by the TreeView. Each :class:`Gtk.TreeModel` can be used by more than one :class:`Gtk.TreeView`. For instance, this allows the same underlying data to be displayed and edited in 2 different ways at the same time. Or the 2 Views might display different columns from the same Model data, in the same way that 2 SQL queries (or \"views\") might show different fields from the same database table."
msgstr "いろいろな :class:`Gtk.TreeView` (``ビュー``) はそれぞれ関連する :class:`Gtk.TreeModel` (``モデル``) を持ちます。このモデルはツリー・ビューが表示するデータを格納しています。 :class:`Gtk.TreeModel` はそれぞれ一個以上の :class:`Gtk.TreeView` から同時に利用できます。例えば、これを使うと任意のデータを同時に別々の方法で表示したり編集できるようになります。もしくは、二つのビューで同じモデル・データからいろいろな項目 (``カラム``) を選択して表示できます。これは、二つの SQL クエリ (または \"ビュー\") が同じデータベースのテーブルからいろいろな項目を取得して表示するのに似ています。"

#: ../source/treeview.txt:30
# 5dafdcec991b48daa8d984a1ba9a4c0f
msgid "Although you can theoretically implement your own Model, you will normally use either the :class:`Gtk.ListStore` or :class:`Gtk.TreeStore` model classes. :class:`Gtk.ListStore` contains simple rows of data, and each row has no children, whereas :class:`Gtk.TreeStore` contains rows of data, and each row may have child rows."
msgstr "理論上は自分で独自のモデルを実装することが可能ですが、通常は標準で用意されている :class:`Gtk.ListStore` か :class:`Gtk.TreeStore` クラスのどちらかを使うことになります。 :class:`Gtk.ListStore` にはデータを行方向に並べたもの (``ノード``) が格納されており、各ノードには子に相当する別のノードはありません。それに対し :class:`Gtk.TreeStore` にはデータを行方向に並べたノードに加え、各ノードには子に相当する別のノードを持たせることができます。"

#: ../source/treeview.txt:36
# 358878b586bb472abbfddac8fc8b80a3
msgid "When constructing a model you have to specify the data types for each column the model holds."
msgstr "モデルを作成する際は、ノードに格納するデータの種類を必要に応じて指定する必要があります。"

#: ../source/treeview.txt:43
# 610c8077b053426ebdcc6b3dab575091
msgid "This creates a list store with three columns, two string columns, and a float column."
msgstr "これは一ノードにつき三種類のデータを格納するリスト・ストアを生成しています。すなわち、列方向に並べられる項目は二つの文字列と一つの実数値になります。"

#: ../source/treeview.txt:46
# 002bcc678d4d4d09b109bb835939d7d1
msgid "Adding data to the model is done using :meth:`Gtk.ListStore.append` or :meth:`Gtk.TreeStore.append`, depending upon which sort of model was created."
msgstr "モデルにデータを追加する際は、作成したモデルの種類に応じて :meth:`Gtk.ListStore.append` か :meth:`Gtk.TreeStore.append` メソッドを使います。"

#: ../source/treeview.txt:53
# 42df98a7770740bf931257597585b4f2
msgid "Both methods return a :class:`Gtk.TreeIter` instance, which points to the location of the newly inserted row. You can retrieve a :class:`Gtk.TreeIter` by calling :meth:`Gtk.TreeModel.get_iter`."
msgstr "これらのメソッドは共に :class:`Gtk.TreeIter` 型のインスタンスを返します。これは新しくデータを追加したノードを指すポインタ (``イテレータ``) です。 :meth:`Gtk.TreeModel.get_iter` メソッドを呼び出すことで最新の :class:`Gtk.TreeIter` を取得できます。"

#: ../source/treeview.txt:57
# fea84ca1a7fd4d6380eab0b5689f990e
msgid "Once, data has been inserted you can retrieve or modify data using the tree iter and column index."
msgstr "ひとたびデータを挿入したら、イテレータと列方向の項目を表すインデックスを使って任意のデータを取得したり編集できるようになります。"

#: ../source/treeview.txt:65
# 2a3bd848900a49ddba276780ac31be17
msgid "As with Python's built-in :class:`list` object you can use :func:`len` to get the number of rows and use slices to retrieve or set values."
msgstr "Python の組込みクラスである :class:`list` 型の :func:`len` メソッドを使って、モデルの中にあるノードの総数を取得したり、スライス (0 からカウントする) を使ってそのノードにあるデータを取得したり指定することができます。"

#: ../source/treeview.txt:79
# 6c1a7885ef6c48608c88c23d14ae36f3
msgid "Iterating over all rows of a tree model is very simple as well."
msgstr "モデルの中にある全てのノードを順番に取得するための簡単な方法があります。"

#: ../source/treeview.txt:87
# 544594218f2846f4b6b370a55842f2bc
msgid "Keep in mind, that if you use :class:`Gtk.TreeStore`, the above code will only iterate over the rows of the top level, but not the children of the nodes. To iterate over all rows and its children, use the ``print_tree_store`` function."
msgstr "覚えておいてほしい点として :class:`Gtk.TreeStore` を使っている場合、上のコードはトップ・レベルのノードだけを順番に取得し、子ノードは対象外ということです。子ノードを含めモデルにある全てのノードを順番に取得したい場合は、次に示す ``print_tree_store()`` メソッドを使用して下さい。"

#: ../source/treeview.txt:105
# 2063c09a89304afea63177059f16a4e6
msgid "Apart from accessing values stored in a :class:`Gtk.TreeModel` with the list-like method mentioned above, it is also possible to either use :class:`Gtk.TreeIter` or :class:`Gtk.TreePath` instances. Both reference a particular row in a tree model. One can convert a path to an iterator by calling :meth:`Gtk.TreeModel.get_iter`. As :class:`Gtk.ListStore` contains only one level, i.e. nodes do not have any child nodes, a path is essentially the index of the row you want to access."
msgstr "上記で説明した :class:`Gtk.TreeModel` に格納した値にリストのような方法でアクセスする場合を除き :class:`Gtk.TreeIter` (``イテレータ``) または :class:`Gtk.TreePath` (``パス``) のいずれかを使ってアクセスすることも可能です。共にツリー・モデルの中にある任意のノードを指すポインタの一種です。 :meth:`Gtk.TreeModel.get_iter` メソッドを呼び出してパスをイテレータに変換することができます。ここで :class:`Gtk.ListStore` にはノードが一階層分しか格納されていない (すなわち、全てのノードは子を持たない) ので、一個のパスは本質的にアクセスしたいノードと同じということになります。"

#: ../source/treeview.txt:122
# 24bdebdb8c2741d88766974c88693439
msgid "In the case of :class:`Gtk.TreeStore`, a path is a list of indexes or a string. The string form is a list of numbers separated by a colon. Each number refers to the offset at that level. Thus, the path \"0\" refers to the root node and the path \"2:4\" refers to the fifth child of the third node."
msgstr ":class:`Gtk.TreeStore` の場合、パスはインデックスまたは文字列からなるリストになります。文字列の場合は数値をコロンで区切ったリストです。各数値はその階層におけるオフセットです。すなわち、パス \"0\" とは 1 行目にある root ノードを指し、パス \"2:4\" とは (root ノードを 0 として) 3 行目にあるノードから、さらに数えて 5 行目にあるノードを指します。"

#: ../source/treeview.txt:136
# 5f009342c40941af920e1f00a20ab531
msgid "TreeModel Objects"
msgstr "ツリーモデルのオブジェクト"

#: ../source/treeview.txt:142
# 2396d377ad5a462b85540d9f27269dd5
msgid "Returns a :class:`Gtk.TreeIter` instance pointing to *path*."
msgstr "*path* を指す :class:`Gtk.TreeIter` 型のイテレータを返します。"

#: ../source/treeview.txt:144
# 5cab6139d9484b1ea3ad461436a3759c
msgid "*path* is expected to be a colon separated list of numbers or a tuple. For example, the string \"10:4:0\" or tuple (10, 4, 0) would create a path of depth 3 pointing to the 11th child of the root node, the 5th child of that 11th child, and the 1st child of that 5th child."
msgstr "引数の *path* はコロン (:) で区切った数値のリストまたはタプルを想定しています。例えば \"10:4:0\" とか (10, 4, 0) は root から数えて 11 行目にあるノードから、さらに数えて 5 行目にある子ノードから、さらに数えて 1 行目にあるノードまでの三階層のパスを生成します。"

#: ../source/treeview.txt:151
# bfc6be7e73b949609666eb3c0b8da328
msgid "Returns a :class:`Gtk.TreeIter` instance pointing the node following *treeiter* at the current level or ``None`` if there is no next iter."
msgstr "*treeiter* と同じ階層で *treeiter* が指すノードの次のノードを指す :class:`Gtk.TreeIter` 、または次のノードが存在しなければ ``None`` を返します。"

#: ../source/treeview.txt:156
# 54286f6cd26a43cc92245add9ee47dda
msgid "Returns ``True`` if *treeiter* has children, ``False`` otherwise."
msgstr "*treeiter* が指すノードに子ノードがあれば ``True`` を返し、それ以外は ``False`` を返します。"

#: ../source/treeview.txt:160
# 67068046aee949c09552304c32b9a628
msgid "Returns a :class:`Gtk.TreeIter` instance pointing to the first child of *treeiter* or ``None`` if *treeiter* has no children."
msgstr "*treeiter* が指すノードが持っている一番先頭の子ノードを指す :class:`Gtk.TreeIter` 、または *treeiter* が子ノードを持たない場合は ``None`` を返します。"

#: ../source/treeview.txt:165
# 22e9ce6078474e53a9c021cccc6832fd
msgid "Returns a :class:`Gtk.TreeIter` instance pointing to the first iterator in the tree (the one at the path \"0\") or ``None`` if the tree is empty."
msgstr "ツリーの中で一番先頭にある (パスが \"0\" である) ノードを指す :class:`Gtk.TreeIter` 、またはツリーが空ならば ``None`` を返します。"

#: ../source/treeview.txt:169
# 8243007df3cd44698b9552d8997dd4d9
msgid "ListStore Objects"
msgstr "リストストアのオブジェクト"

#: ../source/treeview.txt:173
# bf05472c73f64499b708edab6d739788
msgid "Creates a new :class:`Gtk.ListStore` with the specified column data types. Each row added to the list store will have an item in each column."
msgstr "指定した型の項目 (カラム) を持つ新しい :class:`Gtk.ListStore` (``リスト・ストア``) を生成します。リスト・ストアに追加した各ノードにはそれぞれの項目にデータが格納されることになります。"

#: ../source/treeview.txt:176
# a677bb4dc8704c829e11849fea9617ec
msgid "Supported data types are the standard Python ones and GTK+ types:"
msgstr "サポートしているデータ型は標準的な Python の型と GTK+ の型です:"

#: ../source/treeview.txt:178
# 2eb182b0f76b41fca87056066ca27eb3
msgid "str, int, float, long, bool, object"
msgstr "str、int、float、long、bool、オブジェクト"

#: ../source/treeview.txt:179
# 9eabc5205dc64cd69dee64ed792836f7
msgid "GObject.GObject"
msgstr "GObject.GObject"

#: ../source/treeview.txt:183
# 95174fcbee224857b0fd99e1f7e885ed
msgid "Appends a new row to this list store."
msgstr "このリスト・ストアに新しいノードを追加します。"

#: ../source/treeview.txt:185
#: ../source/treeview.txt:203
# 4e749ff7ef354e7b86f8806a17e01367
# 9232463dd9e74b63914080fc4875ffdf
msgid "*row* is a list of values for each column, i.e. ``len(store) == len(row)``. If *row* is omitted or ``None``, an empty row will be appended."
msgstr "*row* は項目毎にセットする値のリストです。すなわち ``len(store) == len(row)`` です。 *row* を省略するか ``None`` にすると、空の (各項目にデータが格納されていない) ノードが追加されます。"

#: ../source/treeview.txt:188
#: ../source/treeview.txt:206
# 46047e3646424fecac4b6ab3c78e62aa
# c9ebd593e8b24ed1bc4536d263b81b5f
msgid "Returns a :class:`Gtk.TreeIter` pointing to the appended row."
msgstr "そして、追加したノードを指す :class:`Gtk.TreeIter` を返します。"

#: ../source/treeview.txt:191
# 34954ba1d5d042488a17d6d62012fb01
msgid "TreeStore Objects"
msgstr "ツリーストアのオブジェクト"

#: ../source/treeview.txt:195
# 5b152bc1268642cda9915846e4d0745e
msgid "Arguments are the same as for the :class:`Gtk.ListStore` constructor."
msgstr "この引数は :class:`Gtk.ListStore` クラスのコンストラクタと同じです。"

#: ../source/treeview.txt:199
# 51b27c2b469e4ddb9c0e8d63ec9bdf72
msgid "Appends a new row to this tree store. *parent* must be a valid :class:`Gtk.TreeIter`. If *parent* is not ``None``, then it will append the new row after the last child of *parent*, otherwise it will append a row to the top level."
msgstr "このツリー・ストアに新しいノードを追加します。 *parent* には妥当な :class:`Gtk.TreeIter` のインスタンスを指定して下さい。 *parent* が ``None`` でなければ *parent* が指す階層で一番最後にある子ノードの次に新しいノードを追加し、それ以外は 1 階層目 (トップレベル) にノードを追加します。"

#: ../source/treeview.txt:209
# 8efc1b576e5049b883d2bbd96b28df24
msgid "TreePath Objects"
msgstr "ツリーパスのオブジェクト"

#: ../source/treeview.txt:213
# 41244d1c47ee42e18ed3c05c03a3334a
msgid "Construct a :class:`Gtk.TreePath` pointing to the node specified by *path*."
msgstr "*path* によって表されるノードを指す :class:`Gtk.TreePath` を一つ生成します。"

#: ../source/treeview.txt:215
# c6d10d8a25264acd921116a7e7bc449f
msgid "If *path* is a string it is expected to be a colon separated list of numbers. For example, the string \"10:4:0\" would create a path of depth 3 pointing to the 11th child of the root node, the 5th child of that 11th child, and the 1st child of that 5th child."
msgstr "引数の *path* が文字列の場合、それは数値をコロンで区切って並べた文字列として解釈されます。例えば \"10:4:0\" という文字列は root から数えて 11 行目にあるノードから、さらに数えて 5 行目にある子ノードから、さらに数えて 1 行目にあるノードまでの三階層のパスを生成します。"

#: ../source/treeview.txt:220
# c235344b0d2849a69ff533e2ed7b4b30
msgid "If *path* is a list or a tuple it is expected to contain the indexes of the nodes. Referring to the above mentioned example, the expression ``Gtk.TreePath(\"10:4:0\")`` is equivalent to ``Gtk.TreePath([10, 4, 3])``."
msgstr "引数の *path* がリストまたはタプルの場合、それは任意のノードのインデックスを含んだものとして解釈されます。例えば、上記の例だと ``Gtk.TreePath(\"10:4:0\")`` というは ``Gtk.TreePath([10, 4, 3])`` と同じ意味になります。"

#: ../source/treeview.txt:225
# 5fa39750c6054c68a1124461d7c04855
msgid "The View"
msgstr "ビュー"

#: ../source/treeview.txt:226
# 9a77504697604366a251a7ec5db415af
msgid "While there are several different models to choose from, there is only one view widget to deal with. It works with either the list or the tree store. Setting up a :class:`Gtk.TreeView` is not a difficult matter. It needs a :class:`Gtk.TreeModel` to know where to retrieve its data from, either by passing it to the :class:`Gtk.TreeView` constructor, or by calling :meth:`Gtk.TreeView.set_model`."
msgstr "いろいろな種類のモデルを選択できる一方で、そのモデルを扱うビュー・ウィジットは一つしかありません。このウィジェットはリスト・ストアまたはツリー・ストアのいずれかを使用します。また :class:`Gtk.TreeView` (``ビュー``) 自体を設定することは難しいことではありません。ビューは、モデルのどこからデータを取得するかを知るために Gtk.TreeModel を使うため :class:`Gtk.TreeView` のコンストラクタの引数にするか、あるいは :meth:`Gtk.TreeView.set_model` メソッドを呼び出すかして、ビューが使用するモデルを指定します。"

#: ../source/treeview.txt:237
# dbec03e5cdf1438f92174481416c02ca
msgid "Once the :class:`Gtk.TreeView` widget has a model, it will need to know how to display the model. It does this with columns and cell renderers."
msgstr ":class:`Gtk.TreeView` ウィジェットにモデルを指定したら、次はそのモデルを表示する方法を知る必要があります。モデルを表示する際は項目 (``カラム``) と ``セル・レンダラ`` を使います (項目の中にはセルをいくつか描画でき、セルが 1 個の場合は項目と同じです)。"

#: ../source/treeview.txt:240
# ebe48e5dae2d44cd8f522c9e6e459cda
msgid "Cell renderers are used to draw the data in the tree model in a way. There are a number of cell renderers that come with GTK+, for instance :class:`Gtk.CellRendererText`, :class:`Gtk.CellRendererPixbuf` and :class:`Gtk.CellRendererToggle`. In addition, it is relatively easy to write a custom renderer yourself."
msgstr "別の言い方をすると、ツリー・モデルの項目の中にあるセルにデータを描画する際にセル・レンダラを使用します。GTK+ は、初めからいろいろな種類のセル・レンダラを用意しています。例えば :class:`Gtk.CellRendererText` や :class:`Gtk.CellRendererPixbuf` 、 :class:`Gtk.CellRendererToggle` があります。さらに、独自のレンダラを実装するのは比較的に簡単です。"

#: ../source/treeview.txt:246
# 812d25778ae148b1b95e2293e6ed70dc
msgid "A :class:`Gtk.TreeViewColumn` is the object that :class:`Gtk.TreeView` uses to organize the vertical columns in the tree view. It needs to know the name of the column to label for the user, what type of cell renderer to use, and which piece of data to retrieve from the model for a given row."
msgstr ":class:`Gtk.TreeViewColumn` (``カラム``) は :class:`Gtk.TreeView` でデータを列方向に並べていく際に使用するオブジェクトの一つです。このオブジェクトには項目名 (カラムの名前) やそこで使用するセル・レンダラの種類、どのデータをモデルから取得するかを指定する必要があります。"

#: ../source/treeview.txt:257
# 4ed104716be8410ea355ce9cd043dc63
msgid "To render more than one model column in a view column, you need to create a :class:`Gtk.TreeViewColumn` instance and use :meth:`Gtk.TreeViewColumn.pack_start` to add the model columns to it."
msgstr "一個の項目の中に複数のセルを描画したいのであれば :class:`Gtk.TreeViewColumn` (``カラム``) を一個作り :meth:`Gtk.TreeViewColumn.pack_start` メソッドを使って、セル・レンダラをそのカラムの中にそれぞれ追加していきます。"

#: ../source/treeview.txt:277
# c76e6ae3c7f54e508f3ff0eb5dcdadb2
msgid "TreeView Objects"
msgstr "ツリービューのオブジェクト"

#: ../source/treeview.txt:281
# 2f4b5849dace470a8525130d04be0fd9
msgid "Creates a new :class:`Gtk.TreeView` widget with the model initialized to *treemodel*. *treemodel* must be a class implementing :class:`Gtk.TreeModel`, such as :class:`Gtk.ListStore` or :class:`Gtk.TreeStore`. If *treemodel* is omitted or ``None``, the model remains unset and you have to call :meth:`set_model` later."
msgstr "新しい :class:`Gtk.TreeView` ウィジェットを生成します。その際に、このビューが保持するモデルを *treemodel* にします。 *treemodel* は :class:`Gtk.ListStore` とか :class:`Gtk.TreeStore` のような :class:`Gtk.TreeModel` 型のインタフェースを実装したクラスにして下さい。 *treemodel* を省略するか、または ``None`` にした場合、既に保持していたモデルが解除されるので、あとで :meth:`Gtk.TreeView.set_model` メソッドを呼び出す必要があります。"

#: ../source/treeview.txt:289
# 0900a0b8d51e4e9fae27005c00d75c36
msgid "Sets the model for this tree view. If this tree view already has a model set, it will remove it before setting the new model. If *model* is ``None``, then it will unset the old model."
msgstr "このツリービューのモデルを指定します。既にツリービューがモデルを保持している場合、新しいモデルをセットする前にそのモデルを削除します。 *model* を ``None`` にすると、古いモデルを解除します。"

#: ../source/treeview.txt:295
# 2ba72326e7734f4882a37ec2afa5a86e
msgid "Returns the model this tree view is based on. Returns ``None`` if the model is unset."
msgstr "このツリービューが保持してるモデルを返します。モデルが解除されていたら ``None`` を返します。"

#: ../source/treeview.txt:300
# 4b8569decb084a05b9e23f894ce94acb
msgid "Appends *column* to the list of columns."
msgstr "列方向に表示している項目の並びに *column* を追加します。"

#: ../source/treeview.txt:304
# ec479f93f10f457ea933c491f419721d
msgid "Gets the :class:`Gtk.TreeSelection` associated with this tree view."
msgstr "このツリービューに対する :class:`Gtk.TreeSelection` を取得します。"

#: ../source/treeview.txt:308
# 4ba04a2772ac4604bae11cc811ecd084
msgid "Arguments are the same as :meth:`Gtk.Widget.drag_source_set`"
msgstr "引数の並びは :meth:`Gtk.Widget.drag_source_set` 関数と同じです。"

#: ../source/treeview.txt:312
# 03c88d66ed3a4ead90227a5de4c6d5d3
msgid "Arguments are the same as :meth:`Gtk.Widget.drag_dest_set`"
msgstr "引数の並びは :meth:`Gtk.Widget.drag_dest_set` 関数と同じです。"

#: ../source/treeview.txt:315
# 7c941c043ef6493bb3e80f2fcdb0ce7e
msgid "TreeViewColumn Objects"
msgstr "ツリービューカラムのオブジェクト"

#: ../source/treeview.txt:319
# ac7c752666414e69be7e58b647f89a2f
msgid "Creates a new :class:`Gtk.TreeViewColumn`."
msgstr "新しい :class:`Gtk.TreeViewColumn` を生成します。"

#: ../source/treeview.txt:321
# 7872d723bc6a4b33baa6d7fd50d4c40d
msgid "*renderer* is expected to be a :class:`Gtk.CellRenderer` instance, and *kwargs* key-value pairs specifying the default values of *renderer*'s properties. This is equivalent to calling :meth:`pack_start` and :meth:`add_attribute` for each key-value pair in *kwargs*."
msgstr "*renderer* は :class:`Gtk.CellRenderer` のインスタンスにし、 *kwargs* は *renderer* のプロパティを表すキーと値のペアの並びにして下さい。これは *kwargs* のキーと値のペアに対して、それぞれ :meth:`Gtk.TreeViewColumn.pack_start` と :meth:`Gtk.TreeViewColumn.add_attribute` を呼び出すことと等価です。"

#: ../source/treeview.txt:326
# c2d55c74321d4ade951183ad6d74c214
msgid "If *renderer* is omitted, you have to call :meth:`pack_start` or :meth:`pack_end` yourself."
msgstr "*renderer* を省略した場合は、明示的に :meth:`Gtk.TreeViewColumn.pack_start` または :meth:`Gtk.TreeViewColumn.pack_end` を呼び出す必要があります。"

#: ../source/treeview.txt:331
# 7969530e41b846f2b2152cc18994ac2a
msgid "Adds an attribute mapping to this column."
msgstr "この項目 (カラム) にマッピングする属性値を追加します。"

#: ../source/treeview.txt:333
# 4f0a6f3ccb50451da950db5cff4659da
msgid "*attribute* is the parameter on *renderer* to be set from the value. So for example if column 2 of the model contains strings, you could have the \"text\" attribute of a :class:`Gtk.CellRendererText` get its values from column 2."
msgstr "*attribute* は *value* でセットされる *renderer* のパラメータです。例えばモデルの 2 番目にある項目が文字列の場合は :class:`Gtk.CellRendererText` の \"text\" という属性値を持たせることができます (これにより、セル・レンダラが 2 番目の項目から \"text\" に対する値を取得できます)。"

#: ../source/treeview.txt:340
# 65336304e1214a12902fe223d6dbd677
msgid "Packs the *renderer* into the beginning of this column. If expand is ``False``, then the *renderer* is allocated no more space than it needs. Any unused space is divided evenly between cells for which expand is ``True``."
msgstr "*renderer* をこの項目 (カラム) の先頭にパッキングします。もし *expand* が ``False`` ならば *renderer* で必要とされる以上の余白が付与されることはありません。使用していない余白は *expand* を ``True`` にしたセルの間で均等に分割されます。"

#: ../source/treeview.txt:346
# e16739cca3d844df8a03312630126ef6
msgid "Adds the *renderer* to end of this column. If expand is ``False``, then the *renderer* is allocated no more space than it needs. Any unused space is divided evenly between cells for which expand is ``True``."
msgstr "*renderer* をこの項目 (カラム) の最後にパッキングします。もし *expand* が ``False`` ならば *renderer* で必要とされる以上の余白が付与されることはありません。使用していない余白は *expand* を ``True`` にしたセルの間で均等に分割されます。"

#: ../source/treeview.txt:352
# 75db7b35dc014211a3e7150dbe9cc23f
msgid "Sets the column of the model by which this column (of the view) should be sorted. This also makes the columnd header clickable."
msgstr "この項目内のデータを並び替えようとした際に、それに対応するモデルのどのデータが対象になるかを指定します。さらに、この項目のヘッダをクリック可能にします。"

#: ../source/treeview.txt:357
# e6dd0e4fd78d435888496ce3760fae9f
msgid "Gets the column id set by :meth:`Gtk.TreeViewColumn.set_sort_column_id`"
msgstr ":meth:`Gtk.TreeViewColumn.set_sort_column_id` で指定した、この項目の並び替えで使用する論理番号を取得します。"

#: ../source/treeview.txt:361
# 8fefe41b88184a0782cc3ac6ee9dcf5c
msgid "Sets whether a little arrow is displayed in the column header to in"
msgstr "この項目のヘッダに小さな矢印を表示するかどうかを指定します。"

#: ../source/treeview.txt:363
# 542e1fa255c6462bad02a499fef8f36e
msgid "*setting* can either be ``True`` (indicator is shown) or ``False``"
msgstr "*setting* には ``True`` (表示する) かまたは ``False`` のどちらかを指定して下さい。"

#: ../source/treeview.txt:367
# f82f796e2067418ca346e41f06433852
msgid "Gets the value set by :meth:`Gtk.TreeViewColumn.set_sort_indicator`"
msgstr ":meth:`Gtk.TreeViewColumn.set_sort_indicator` で指定した値を取得します。"

#: ../source/treeview.txt:371
# 49f5c8bf686f41e78d1840f5901aeedc
msgid "Changes the order by which the column is sorted."
msgstr "この項目を並び替える際の順番を変更します。"

#: ../source/treeview.txt:373
#: ../source/treeview.txt:532
# 6f80529af8fb4886bdd8cadd8b319c1f
# 833bcc4d00f8463b9431b94c36329a28
msgid "*order* can either be ``Gtk.SortType.ASCENDING`` or ``Gtk.SortType.DESCENDING``."
msgstr "*order* には ``Gtk.SortType.ASCENDING`` または ``Gtk.SortType.DESCENDING``  のいずれかを指定します。"

#: ../source/treeview.txt:377
# 0b000d1ab3a147789c8e86f79aff89b8
msgid "Gets the sort order set by :meth:`Gtk.TreeViewColumn.set_sort_order`"
msgstr ":meth:`Gtk.TreeViewColumn.set_sort_order` で指定した並び替えの順番を取得します。"

#: ../source/treeview.txt:380
# 27517c731ad540db8b004ca9707f169f
msgid "The Selection"
msgstr "セレクション"

#: ../source/treeview.txt:381
# 1866d04dfeeb4990bb1e63729706b9cd
msgid "Most applications will need to not only deal with displaying data, but also receiving input events from users. To do this, simply get a reference to a selection object and connect to the \"changed\" signal."
msgstr "ほとんどのアプリケーションは、そこに表示しているデータを単に処理するだけではなく、ユーザからの入力などのイベントも受け取れるようにしておく必要があります。そのような時には、(現在選択している範囲を表す) セレクション・オブジェクトへのリファレンスを取得して \"changed\" シグナルを接続しておきます。"

#: ../source/treeview.txt:390
# 19784a05f40b41f5aed4092768d073cf
msgid "Then to retrieve data for the row selected:"
msgstr "それから、そこで選択したノードのデータを取得します:"

#: ../source/treeview.txt:399
# c98c1539dbad464a818cf69d98d02e24
msgid "You can control what selections are allowed by calling :meth:`Gtk.TreeSelection.set_mode`. :meth:`Gtk.TreeSelection.get_selected` does not work if the selection mode is set to :attr:`Gtk.SelectionMode.MULTIPLE`, use :meth:`Gtk.TreeSelection.get_selected_rows` instead."
msgstr ":meth:`Gtk.TreeSelection.set_mode` を使って、どんな種類のセレクションを利用できるか指定できます。 :meth:`Gtk.TreeSelection.get_selected` は、このセレクションのモードが :attr:`Gtk.SelectionMode.MULTIPLE` の時は何もしないので、代わりに :meth:`Gtk.TreeSelection.get_selected_rows` を使って下さい。"

#: ../source/treeview.txt:407
# e555b9338a0f4639b5f0d29157a12ecb
msgid "TreeSelection Objects"
msgstr "ツリーセレクションのオブジェクト"

#: ../source/treeview.txt:413
# e810959e9760442d918df71d0ba37785
msgid "Where type is one of"
msgstr "*type* は次のいずれかになります。"

#: ../source/treeview.txt:415
# 19918dcdb6a04a26b48580aa1460d7c7
msgid ":attr:`Gtk.SelectionMode.NONE`: No selection is possible"
msgstr ":attr:`Gtk.SelectionMode.NONE`:  何も選択できない"

#: ../source/treeview.txt:416
# c823746b444043a2aef77de2d534f2f4
msgid ":attr:`Gtk.SelectionMode.SINGLE`: Zero or one element may be selected"
msgstr ":attr:`Gtk.SelectionMode.SINGLE`: 0 個ないし 1 個の要素を選択できる"

#: ../source/treeview.txt:417
# ca88cda308e64c0cb23a1aa2723a7105
msgid ":attr:`Gtk.SelectionMode.BROWSE`: Exactly one element is selected. In some circumstances, such as initially or during a search operation, it's possible for no element to be selected. What is really enforced is that the user can't deselect a currently selected element except by selecting another element."
msgstr ":attr:`Gtk.SelectionMode.BROWSE`: 1 個だけの要素を選択できる (ツリーを生成した直後や検索の操作を行っているといった環境では、何も選択しないという状況がありえます。このような時に実現したい操作は、別の要素を選択するまで、現在選択中の要素を選択解除できないようにするというものです)"

#: ../source/treeview.txt:422
# 09bb159810d44ba09b520e6e4d895e30
msgid ":attr:`Gtk.SelectionMode.MULTIPLE`: Any number of elements may be selected. Clicks toggle the state of an item. Any number of elements may be selected. The Ctrl key may be used to enlarge the selection, and Shift key to select between the focus and the child pointed to. Some widgets may also allow Click-drag to select a range of elements."
msgstr ":attr:`Gtk.SelectionMode.MULTIPLE`: いくつでも要素を選択できる (要素をクリックすると選択または選択解除の状態を切り替えます。それによりたくさんの要素を選択できるようにします。[Ctrl] キーを併用すると選択している範囲を広げることができ、[Shift] キーを併用するとフォーカスした場所から次にクリックした場所まで選択できます。更にウィジェットの中にはクリックしながらドラッグすることで選択範囲を変更できるものがあります)"

#: ../source/treeview.txt:430
# 526575ef537d48d4aa4def25a889fdee
msgid "Returns a tuple ``(model, treeiter)``, where *model* is the current model and *treeiter* a :class:`Gtk.TreeIter` pointing to the currently selected row. *treeiter* is ``None`` if no rows are selected."
msgstr "``(model, treeiter)`` 形式のタプルを一つ返します。 *model* は現在使用しているモデル、 *treeiter* は現在選択しているノードを指す :class:`Gtk.TreeIter` (``イテレータ``) です。何も選択していない場合は *treeiter* は ``None`` になります。"

#: ../source/treeview.txt:434
# 389e452c5bb0418a805aa8a6f7ecacef
msgid "This function will not work if the mode of this selection is :attr:`Gtk.SelectionMode.MULTIPLE`."
msgstr "このメソッドは、このセレクションのモードが :attr:`Gtk.SelectionMode.MULTIPLE` の時は何もしません"

#: ../source/treeview.txt:439
# 0afa4fcffa504eb596f7795ed8805239
msgid "Returns a list of :class:`Gtk.TreePath` instances of all selected rows."
msgstr "現在選択している全てのノードに対する :class:`Gtk.TreePath` (``パス``) を要素とするリストを返します。"

#: ../source/treeview.txt:442
# 4c1c3bd2b9db47ccbef3b8f639f7d630
msgid "Sorting"
msgstr "並び替え"

#: ../source/treeview.txt:443
# f35d99c0c7ed4bc98250a5bdda1cce37
msgid "Sorting is an important feature for tree views and is supported by the standard tree models (:class:`Gtk.TreeStore` and :class:`Gtk.ListStore`), which implement the :class:`Gtk.TreeSortable` interface."
msgstr "並び替えはツリービューにとって重要な機能の一つであり、標準的なツリーモデル (:class:`Gtk.TreeStore` と :class:`Gtk.ListStore` の両方) でサポートされています (実際は :class:`Gtk.TreeSortable` というインタフェースが実装しています)。"

#: ../source/treeview.txt:446
# c6493b9b0535408a87149afa6492769b
msgid "Sorting by clicking on columns"
msgstr "項目をクリックして並び替える"

#: ../source/treeview.txt:447
# fa39d1da593441bcb550009007f049b5
msgid "A column of a :class:`Gtk.TreeView` can easily made sortable with a call to :meth:`Gtk.TreeViewColumn.set_sort_column_id`. Afterwards the column can be sorted by clicking on its header."
msgstr ":class:`Gtk.TreeView` クラスの項目 (``カラム``) は :meth:`Gtk.TreeViewColumn.set_sort_column_id` メソッドを使うと簡単に並び替え出来るようになっています。この関数を呼び出した後は、各項目のヘッダをクリックすることで、カラムの並び替えができるようになります。"

#: ../source/treeview.txt:450
# e01acc3170804564a42ff09c3f34462f
msgid "First we need a simple :class:`Gtk.TreeView` and a :class:`Gtk.ListStore` as a model."
msgstr "まず、簡単な :class:`Gtk.TreeView` とそのモデルとして :class:`Gtk.ListStore` を用意します。"

#: ../source/treeview.txt:469
# 17d8071367fb4475a473a9adada6bba6
msgid "The next step is to enable sorting. Note that the *column_id* (``0`` in the example) refers to the column of the model and **not** to the TreeView's column."
msgstr "それから並び替えができるようにします。ここで、次の *column_id* (この例では ``0``) はあくまでもモデルの中の項目を参照しているのであり、ツリービューに表示している項目を参照しているわけでは「ない」という点に注意して下さい。"

#: ../source/treeview.txt:476
# 5961a53a67774734abca8f67a1f6cd7d
msgid "Setting a custom sort function"
msgstr "独自に並び替えを実装する"

#: ../source/treeview.txt:477
# d506f0544df54ca18e63ef0f9ecc2e0d
msgid "It is also possible to set a custom comparison function in order to change the sorting behaviour. As an example we will create a comparison function that sorts case-sensitive. In the example above the sorted list looked like::"
msgstr "さらに、並び替えの挙動を変更するために、独自に (並び替えで使用する) 比較関数を実装して指定することも可能になっています。一例として、大小文字で並び替えを行うための比較関数を作成してみます::"

#: ../source/treeview.txt:490
# f72203f537c44c10b65266a7cc85e58b
msgid "The case-sensitive sorted list will look like::"
msgstr "上記のデータを、次のように大小文字で並び替えたいとします::"

#: ../source/treeview.txt:501
# ab6a02d63cd845c1b6a0f83073737dfb
msgid "First of all a comparison function is needed. This function gets two rows and has to return a negative integer if the first one should come before the second one, zero if they are equal and a positive integer if the second one should come before the second one."
msgstr "まず最初に、上記のような並び替えを行うために比較関数が一つ必要です。この関数は二つの項目のデータ (row1 と row2) を受け取り、最初のデータが二番目のデータの前にくる場合は負の整数を、両方とも同じであれば 0 を、そして二番目のデータが最初のデータの前にくる場合は正の整数を返すようにします。"

#: ../source/treeview.txt:517
# e644c2950b6e45319482bd874cfc3a59
msgid "Then the sort function has to be set by :meth:`Gtk.TreeSortable.set_sort_func`."
msgstr "そして、この比較関数を :meth:`Gtk.TreeSortable.set_sort_func` メソッドを使ってモデルにセットします。"

#: ../source/treeview.txt:524
# e81c2e18c5554a48906622dccbe01651
msgid "TreeSortable objects"
msgstr "ツリーソータブルのオブジェクト"

#: ../source/treeview.txt:530
# 9599e6fe7c8945058ab6a5e7a32b43e6
msgid "Sets the current sort column to *sort_column_id*."
msgstr "現在の並び替えの対象となる項目を *sort_column_id* にします。"

#: ../source/treeview.txt:536
# 29391db64c8348b995614d25d63cc257
msgid "Returns a tuple consisting of the current sort column and order."
msgstr "現在の並び替えの対象となる項目とその *order* を要素とするタプルを返します。"

#: ../source/treeview.txt:540
# 264d48f18d6e40dbb6a984584676c98c
msgid "Sets the comparison function used when sorting by the colum *sort_column_id*."
msgstr "*sort_column_id* 番目の項目の並び替えで使用する比較関数を指定します。"

#: ../source/treeview.txt:542
# a2f07bbaead548adad2f970207cc6dc2
msgid "*user_data* gets passed to *sort_func*."
msgstr "*user_data* は *sort_func* に引き渡すユーザ・データです。"

#: ../source/treeview.txt:544
# 53bf56958e8b4bcc81f1e90a2d6e7ec2
msgid "*sort_func* is a function with the signature ``sort_func(model, iter1, iter2, user_data)`` and should return a negative integer if *iter1* sorts before *iter2*, zero if they are equal and a positive integer if *iter2* sorts before *iter1*."
msgstr "*sort_func* は ``sort_func(model, iter1, iter2, user_data)`` というシグネチャを持つ関数で、 *iter1* が *iter2* よりも前にくる場合は負の整数を、双方が同じなら 0 を、 *iter2* が *iter1* よりも前にくるならば正の整数を返すようにして下さい。"

#: ../source/treeview.txt:550
# 319e25a4cd044dd382788106e8167c49
msgid "See :meth:`Gtk.TreeSortable.set_sort_func`. This sets the comparison function that is used when sorting by the default sort column"
msgstr ":meth:`Gtk.TreeSortable.set_sort_func` も参照して下さい。このメソッドを使って、デフォルトの項目を対象とする並び替えで使用する比較関数を指定します。"

