# Italian translation for PyGObject-Tutorial.
# Copyright (C) GNU Free Documentation License 1.3
# This file is distributed under the same license as the Python GTK+ 3 Tutorial package.
# Daniele Medri <dmedri@gmail.com>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python GTK+ 3 Tutorial 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-08-10 09:47\n"
"PO-Revision-Date: 2017-01-09 22:16+0100\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: Daniele Medri <dmedri@gmail.com>\n"
"Language-Team: \n"
"Language: it\n"
"X-Generator: Poedit 1.8.11\n"

# 9809cf7615bd45c0bb645aa9106a56d7
#: ../source/unicode.txt:2
msgid "How to Deal With Strings"
msgstr "Come gestire le stringhe"

# f2d16386846a46e98ffa00253553da47
#: ../source/unicode.txt:4
msgid "This section explains how strings are represented in Python 2.x, Python 3.x and GTK+ and discusses common errors that arise when working with strings."
msgstr "Questa sezione spiega come le stringhe sono rappresentate in Python 2.x, Python 3.x e GTK+ e discute i principali errori che si riscontrano quando si lavora con le stringhe."

# e2dede016a10489193f6d69bd4c25699
#: ../source/unicode.txt:8
msgid "Definitions"
msgstr "Definizioni"

# 2691478223384e71a5aaec49e652d766
#: ../source/unicode.txt:9
msgid "Conceptionally, a string is a list of characters such as 'A', 'B', 'C' or 'É'. **Characters** are abstract representations and their meaning depends on the language and context they are used in. The Unicode standard describes how characters are represented by **code points**. For example the characters above are represented with the code points U+0041, U+0042, U+0043, and U+00C9, respectively. Basically, code points are numbers in the range from 0 to 0x10FFFF."
msgstr "Concettualmente, una stringa è un elenco di caratteri come 'A', 'B', 'C' o 'É'. I *caratteri* sono rappresentazioni astratte e il loro significato dipende dal linguaggio e dal contesto in cui vengono utilizzati. Lo standard Unicode descrive come i caratteri sono rappresentati da **code point**. Per esempio i caratteri precedenti sono rappresentati rispettivamente dai code points U + 0041, U + 0042, U + 0043 e U + 00C9. In sostanza, i code points sono numeri nell'intervallo che va da 0 a 0x10FFFF."

# 2d23c5309caf4de082b848a5789af984
#: ../source/unicode.txt:17
msgid "As mentioned earlier, the representation of a string as a list of code points is abstract. In order to convert this abstract representation into a sequence of bytes the Unicode string must be **encoded**. The simplest from of encoding is ASCII and is performed as follows:"
msgstr "Come accennato in precedenza, la rappresentazione di una stringa come lista di code points è astratta. Per convertire questa rappresentazione astratta in una sequenza di byte, la stringa Unicode deve essere **encoded**, codificata. La codifica più semplice è ASCII e viene eseguita come segue:"

# 0a8f2e94bc5a4dd78ad456a93281a3b2
#: ../source/unicode.txt:22
msgid "If the code point is < 128, each byte is the same as the value of the code point."
msgstr "Se il code point è <128, ogni byte è uguale al valore del code point."

# 16334e13413d45e7a7c93a1bab90f208
#: ../source/unicode.txt:25
msgid "If the code point is 128 or greater, the Unicode string can't be represented in this encoding.  (Python raises a :exc:`UnicodeEncodeError` exception in this case.)"
msgstr "Se il code point è 128 o superiore, la stringa Unicode non può essere rappresentata in questa codifica. (Python mostra un'eccezione :exc:`UnicodeEncodeError` in questo caso.)"

# 7bfc5ae72ce44caba7c1bfe75b1b9d01
#: ../source/unicode.txt:29
msgid "Although ASCII encoding is simple to apply it can only encode for 128 different characters which is hardly enough. One of the most commonly used encodings that addresses this problem is UTF-8 (it can handle any Unicode code point). UTF stands for \"Unicode Transformation Format\", and the '8' means that 8-bit numbers are used in the encoding."
msgstr "Sebbene la codifica ASCII sia semplice da applicare, è appena sufficiente per codificare 128 diversi caratteri. Una delle codifiche più comunemente usate in grado di risolvere questo problema è UTF-8 (in grado di gestire qualsiasi code point Unicode). UTF sta per \"Unicode Transformation Format\", e '8' significa che vengono utilizzati numeri a 8 bit per la codifica."

# cdc5123217114ec781dd2410678b1c34
#: ../source/unicode.txt:37
msgid "Python 2"
msgstr "Python 2"

# e03bd35515c94783b753502860d60aa7
#: ../source/unicode.txt:40
msgid "Python 2.x’s Unicode Support"
msgstr "Supporto Unicode per Python 2.x"

# b124d2e0ad814b1fbaab543f33a7bbfe
#: ../source/unicode.txt:41
msgid "Python 2 comes with two different kinds of objects that can be used to represent strings, :class:`str` and :class:`unicode`. Instances of the latter are used to express Unicode strings, whereas instances of the :class:`str` type are byte representations (the encoded string). Under the hood, Python represents Unicode strings as either 16- or 32-bit integers, depending on how the Python interpreter was compiled. Unicode strings can be converted to 8-bit strings with :meth:`unicode.encode`::"
msgstr "Python 2 è dotato di due diversi tipi di oggetti che possono essere utilizzati per rappresentare le stringhe, :class:`str` e :class:`unicode`. Le istanze di questi ultimi sono utilizzate per esprimere stringhe Unicode, mentre le istanze del tipo :class:`str` sono rappresentazioni di byte (la stringa codificata). Al proprio interno, Python rappresenta stringhe Unicode come interi a 16 o 32 bit, a seconda di come l'interprete Python è stato compilato. Le stringhe Unicode possono essere convertite in stringhe a 8-bit con :meth:`unicode.encode`::"

# bd13eea2fa0741e9876db7711ffe7431
#: ../source/unicode.txt:58
msgid "Python’s 8-bit strings have a :meth:`str.decode` method that interprets the string using the given encoding::"
msgstr "Le stringhe a 8-bit di Python hanno un metodo :meth:`str.decode` che interpreta la stringa utilizzando la codifica data::"

# 57feae3870084f8d9c5e8486dcc7204d
#: ../source/unicode.txt:68
msgid "Unfortunately, Python 2.x allows you to mix :class:`unicode` and :class:`str` if the 8-bit string happened to contain only 7-bit (ASCII) bytes, but would get :exc:`UnicodeDecodeError` if it contained non-ASCII values::"
msgstr "Purtroppo, Python 2.x permette di mischiare :class:`unicode` e :class:`str` se la stringa a 8-bit contiene solo 7-bit byte (ASCII), ma riceverebbe un :exc:`UnicodeDecodeError` se contenesse valori non ASCII::"

# 8d01bbc1bda34388a8aa32ae4841087c
# aa539bf22ae04daeaf1e7ed3dfdcb2ef
#: ../source/unicode.txt:84 ../source/unicode.txt:146
msgid "Unicode in GTK+"
msgstr "Unicode in GTK+"

# 61c4e37a1e054280b39513c0141f6466
#: ../source/unicode.txt:85
msgid "GTK+ uses UTF-8 encoded strings for all text. This means that if you call a method that returns a string you will always obtain an instance of the :class:`str` type. The same applies to methods that expect one or more strings as parameter, they must be UTF-8 encoded. However, for convenience PyGObject will automatically convert any :class:`unicode` instance to :class:`str` if supplied as argument::"
msgstr "GTK+ utilizza stringhe UTF-8 codificati per il testo. Questo significa che se si chiama un metodo che restituisce una stringa si otterrà sempre un'istanza di :class:`str`. Lo stesso vale per i metodi che prevedono una o più stringhe come parametro, devono essere codificate UTF-8. Tuttavia, per comodità, PyGObject convertirà automaticamente qualsiasi istanza :class:`unicode` a :class:`str` se passato come argomento::"

# 8da4c72b23904e3f9a0681d1fcb4cf42
#: ../source/unicode.txt:102
msgid "Note the warning at the end. Although we called :meth:`Gtk.Label.set_text` with a :class:`unicode` instance as argument, :meth:`Gtk.Label.get_text` will always return a :class:`str` instance. Accordingly, ``txt`` and ``unicode_string`` are *not* equal."
msgstr "Si noti l'avviso alla fine. Anche se abbiamo chiamato :meth:`Gtk.Label.set_text` con un'istanza :class:`unicode` come argomento, :meth:`Gtk.Label.get_text` restituirà sempre un'istanza :class:`str`. Di conseguenza, ``txt`` e ``unicode_string`` *non* sono uguali."

# e5cf7d82ce0a4694b7e79dcc11570f25
#: ../source/unicode.txt:107
msgid "This is especially important if you want to internationalize your program using `gettext <http://docs.python.org/library/gettext.html>`_. You have to make sure that gettext will return UTF-8 encoded 8-bit strings for all languages. In general it is recommended to not use :class:`unicode` objects in GTK+ applications at all and only use UTF-8 encoded :class:`str` objects since GTK+ does not fully integrate with :class:`unicode` objects. Otherwise, you would have to decode the return values to Unicode strings each time you call a GTK+ method::"
msgstr "Ciò è particolarmente importante se si vuole internazionalizzare il programma utilizzando `gettext <http://docs.python.org/library/gettext.html>` _. Bisogna fare in modo che gettext restituisca stringhe UTF-8 codificate a 8 bit per tutte le lingue. In generale si raccomanda di non utilizzare oggetti :class:`unicode` e oggetti :class:`str` codificati UTF-8 in applicazioni GTK+ perché queste ultime non si integrano pienamente con oggetti :class:`unicode`. In caso contrario, si dovrà decodificare i valori restituiti in stringhe Unicode ogni volta che si chiama un metodo di GTK+::"

# f699228e4f724d468ba137aa95cce2ac
#: ../source/unicode.txt:120
msgid "Python 3"
msgstr "Python 3"

# 36dea2d034ba47739fcbc70159e1f507
#: ../source/unicode.txt:123
msgid "Python 3.x's Unicode support"
msgstr "Supporto Unicode per Python 3.x"

# 0089b245210d4def97f7a89941d64378
#: ../source/unicode.txt:124
msgid "Since Python 3.0, all strings are stored as Unicode in an instance of the :class:`str` type. *Encoded* strings on the other hand are represented as binary data in the form of instances of the :class:`bytes` type. Conceptionally, :class:`str` refers to *text*, whereas :class:`bytes` refers to *data*. Use :meth:`str.encode` to go from :class:`str` to :class:`bytes`, and :meth:`bytes.decode` to go from :class:`bytes` to :class:`str`."
msgstr "Con Python 3.0, tutte le stringhe vengono memorizzati come Unicode in un'istanza di tipo :class:`str`. Le stringhe *codificate* invece sono rappresentate come dati binari sotto forma di istanze del tipo :class:`bytes`. Concettualmente, :class:`str` fa riferimento a *testo*, mentre :class:`bytes` fa riferimento a *dati*. Utilizza :meth:`str.encode` per convertire :class:`str` in :class:`bytes` e :meth:`bytes.decode` per passare da :class:`bytes` a :class:`str`."

# b6602283d69145acb1362b240f1f2af8
#: ../source/unicode.txt:131
msgid "In addition, it is no longer possible to mix Unicode strings with encoded strings, because it will result in a :exc:`TypeError`::"
msgstr "In aggiunta, non è più possibile unire stringhe Unicode con stringhe non codificate, perché ne conseguerà :exc:`TypeError`::"

# 3cddec65eec74c06939f42f7c2e98c40
#: ../source/unicode.txt:147
msgid "As a consequence, things are much cleaner and consistent with Python 3.x, because PyGObject will automatically encode/decode to/from UTF-8 if you pass a string to a method or a method returns a string. Strings, or *text*, will always be represented as instances of :class:`str` only::"
msgstr "Come conseguenza, le cose sono molto più semplici e coerenti con Python 3.x, perché PyGObject codificherà/decodificherà automaticamente da/per UTF-8 se si passa una stringa in un metodo o un metodo restituisce una stringa. Le stringhe, o * testo*, saranno sempre rappresentati come istanze di :class:`str`::"

# 2645c75cc87e4a26a04073f8e94e647d
#: ../source/unicode.txt:163
msgid "References"
msgstr "Riferimenti"

# d5aa2e7b68b744b98226b7f57d0b52cf
#: ../source/unicode.txt:164
msgid "`What's new in Python 3.0 <http://docs.python.org/py3k/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit>`_ describes the new concepts that clearly distinguish between text and data."
msgstr "`Novità in Python 3.0 <http://docs.python.org/py3k/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit>`_ descrive i nuovi concetti che distinguono chiaramente tra testo e dati."

# b5f5c4fad9f8498e9a48a844d936684c
#: ../source/unicode.txt:167
msgid "The `Unicode HOWTO <http://docs.python.org/howto/unicode.html>`_ discusses Python 2.x’s support for Unicode, and explains various problems that people commonly encounter when trying to work with Unicode."
msgstr "Il manuale `Unicode HOWTO <http://docs.python.org/howto/unicode.html>`_ parla del supporto di Python 2.x per Unicode e spiega i vari problemi che le persone hanno riscontrato lavorando con questo standard."

# 8de0ed991ab2410f8941b1bd2753fa72
#: ../source/unicode.txt:171
msgid "The `Unicode HOWTO for Python 3.x <http://docs.python.org/dev/howto/unicode.html>`_ discusses Unicode support in Python 3.x."
msgstr "Il manuale `Unicode HOWTO per Python 3.x <http://docs.python.org/dev/howto/unicode.html>`_ parla del supporto Unicode in Python 3.x."

# 9ac015d7fa8543e4967271f447b3606d
#: ../source/unicode.txt:174
msgid "`UTF-8 encoding table and Unicode characters <http://www.utf8-chartable.de>`_ contains a list of Unicode code points and their respective UTF-8 encoding."
msgstr "La `tabella di codifica UTF-8 e i caratteri Unicode <http://www.utf8-chartable.de>`_ contengono una lista di codici Unicode e la rispettiva codifica UTF-8."
