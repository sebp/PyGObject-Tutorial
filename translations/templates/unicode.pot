# SOME DESCRIPTIVE TITLE.
# Copyright (C) GNU Free Documentation License 1.3
# This file is distributed under the same license as the Python GTK+ 3 Tutorial package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python GTK+ 3 Tutorial 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-01-15 18:53+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/unicode.txt:2
msgid "How to Deal With Strings"
msgstr ""

#: ../../source/unicode.txt:4
msgid "This section explains how strings are represented in Python 2.x, Python 3.x and GTK+ and discusses common errors that arise when working with strings."
msgstr ""

#: ../../source/unicode.txt:8
msgid "Definitions"
msgstr ""

#: ../../source/unicode.txt:9
msgid "Conceptionally, a string is a list of characters such as 'A', 'B', 'C' or 'É'. **Characters** are abstract representations and their meaning depends on the language and context they are used in. The Unicode standard describes how characters are represented by **code points**. For example the characters above are represented with the code points U+0041, U+0042, U+0043, and U+00C9, respectively. Basically, code points are numbers in the range from 0 to 0x10FFFF."
msgstr ""

#: ../../source/unicode.txt:17
msgid "As mentioned earlier, the representation of a string as a list of code points is abstract. In order to convert this abstract representation into a sequence of bytes the Unicode string must be **encoded**. The simplest form of encoding is ASCII and is performed as follows:"
msgstr ""

#: ../../source/unicode.txt:22
msgid "If the code point is < 128, each byte is the same as the value of the code point."
msgstr ""

#: ../../source/unicode.txt:25
msgid "If the code point is 128 or greater, the Unicode string can't be represented in this encoding.  (Python raises a :exc:`UnicodeEncodeError` exception in this case.)"
msgstr ""

#: ../../source/unicode.txt:29
msgid "Although ASCII encoding is simple to apply it can only encode for 128 different characters which is hardly enough. One of the most commonly used encodings that addresses this problem is UTF-8 (it can handle any Unicode code point). UTF stands for \"Unicode Transformation Format\", and the '8' means that 8-bit numbers are used in the encoding."
msgstr ""

#: ../../source/unicode.txt:37
msgid "Python 2"
msgstr ""

#: ../../source/unicode.txt:40
msgid "Python 2.x’s Unicode Support"
msgstr ""

#: ../../source/unicode.txt:41
msgid "Python 2 comes with two different kinds of objects that can be used to represent strings, :class:`str` and :class:`unicode`. Instances of the latter are used to express Unicode strings, whereas instances of the :class:`str` type are byte representations (the encoded string). Under the hood, Python represents Unicode strings as either 16- or 32-bit integers, depending on how the Python interpreter was compiled. Unicode strings can be converted to 8-bit strings with :meth:`unicode.encode`::"
msgstr ""

#: ../../source/unicode.txt:58
msgid "Python’s 8-bit strings have a :meth:`str.decode` method that interprets the string using the given encoding::"
msgstr ""

#: ../../source/unicode.txt:68
msgid "Unfortunately, Python 2.x allows you to mix :class:`unicode` and :class:`str` if the 8-bit string happened to contain only 7-bit (ASCII) bytes, but would get :exc:`UnicodeDecodeError` if it contained non-ASCII values::"
msgstr ""

#: ../../source/unicode.txt:85
#: ../../source/unicode.txt:148
msgid "Unicode in GTK+"
msgstr ""

#: ../../source/unicode.txt:86
msgid "GTK+ uses UTF-8 encoded strings for all text. This means that if you call a method that returns a string you will always obtain an instance of the :class:`str` type. The same applies to methods that expect one or more strings as parameter, they must be UTF-8 encoded. However, for convenience PyGObject will automatically convert any :class:`unicode` instance to :class:`str` if supplied as argument::"
msgstr ""

#: ../../source/unicode.txt:104
msgid "Note the warning at the end. Although we called :meth:`Gtk.Label.set_text` with a :class:`unicode` instance as argument, :meth:`Gtk.Label.get_text` will always return a :class:`str` instance. Accordingly, ``txt`` and ``unicode_string`` are *not* equal."
msgstr ""

#: ../../source/unicode.txt:109
msgid "This is especially important if you want to internationalize your program using `gettext <https://docs.python.org/library/gettext.html>`_. You have to make sure that gettext will return UTF-8 encoded 8-bit strings for all languages. In general it is recommended to not use :class:`unicode` objects in GTK+ applications at all and only use UTF-8 encoded :class:`str` objects since GTK+ does not fully integrate with :class:`unicode` objects. Otherwise, you would have to decode the return values to Unicode strings each time you call a GTK+ method::"
msgstr ""

#: ../../source/unicode.txt:122
msgid "Python 3"
msgstr ""

#: ../../source/unicode.txt:125
msgid "Python 3.x's Unicode support"
msgstr ""

#: ../../source/unicode.txt:126
msgid "Since Python 3.0, all strings are stored as Unicode in an instance of the :class:`str` type. *Encoded* strings on the other hand are represented as binary data in the form of instances of the :class:`bytes` type. Conceptionally, :class:`str` refers to *text*, whereas :class:`bytes` refers to *data*. Use :meth:`str.encode` to go from :class:`str` to :class:`bytes`, and :meth:`bytes.decode` to go from :class:`bytes` to :class:`str`."
msgstr ""

#: ../../source/unicode.txt:133
msgid "In addition, it is no longer possible to mix Unicode strings with encoded strings, because it will result in a :exc:`TypeError`::"
msgstr ""

#: ../../source/unicode.txt:149
msgid "As a consequence, things are much cleaner and consistent with Python 3.x, because PyGObject will automatically encode/decode to/from UTF-8 if you pass a string to a method or a method returns a string. Strings, or *text*, will always be represented as instances of :class:`str` only::"
msgstr ""

#: ../../source/unicode.txt:165
msgid "References"
msgstr ""

#: ../../source/unicode.txt:166
msgid "`What's new in Python 3.0 <https://docs.python.org/py3k/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit>`_ describes the new concepts that clearly distinguish between text and data."
msgstr ""

#: ../../source/unicode.txt:169
msgid "The `Unicode HOWTO <https://docs.python.org/howto/unicode.html>`_ discusses Python 2.x’s support for Unicode, and explains various problems that people commonly encounter when trying to work with Unicode."
msgstr ""

#: ../../source/unicode.txt:173
msgid "The `Unicode HOWTO for Python 3.x <https://docs.python.org/dev/howto/unicode.html>`_ discusses Unicode support in Python 3.x."
msgstr ""

#: ../../source/unicode.txt:176
msgid "`UTF-8 encoding table and Unicode characters <http://www.utf8-chartable.de>`_ contains a list of Unicode code points and their respective UTF-8 encoding."
msgstr ""

