# SOME DESCRIPTIVE TITLE.
# Copyright (C) GNU Free Documentation License 1.3
# This file is distributed under the same license as the Python GTK+ 3 Tutorial package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python GTK+ 3 Tutorial 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-01-15 18:53+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/objects.txt:4
msgid "Objects"
msgstr ""

#: ../../source/objects.txt:6
msgid "GObject is the fundamental type providing the common attributes and methods for all object types in GTK+, Pango and other libraries based on GObject. The :class:`GObject.GObject` class provides methods for object construction and destruction, property access methods, and signal support."
msgstr ""

#: ../../source/objects.txt:11
msgid "This section will introduce some important aspects about the GObject implementation in Python."
msgstr ""

#: ../../source/objects.txt:15
msgid "Inherit from GObject.GObject"
msgstr ""

#: ../../source/objects.txt:17
msgid "A native GObject is accessible via :class:`GObject.GObject`. It is rarely instantiated directly, we generally use inherited class. A :class:`Gtk.Widget` is an inherited class of a :class:`GObject.GObject`. It may be interesting to make an inherited class to create a new widget, like a settings dialog."
msgstr ""

#: ../../source/objects.txt:22
msgid "To inherit from :class:`GObject.GObject`, you must call :meth:`GObject.GObject.__init__` in your constructor (if the class inherits from :class:`Gtk.Button`, it must call :func:`Gtk.Button.__init__` for instance), like in the example below:"
msgstr ""

#: ../../source/objects.txt:37
msgid "Signals"
msgstr ""

#: ../../source/objects.txt:39
msgid "Signals connect arbitrary application-specific events with any number of listeners. For example, in GTK+, every user event (keystroke or mouse move) is received from the X server and generates a GTK+ event under the form of a signal emission on a given object instance."
msgstr ""

#: ../../source/objects.txt:44
msgid "Each signal is registered in the type system together with the type on which it can be emitted: users of the type are said to connect to the signal on a given type instance when they register a function to be invoked upon the signal emission. Users can also emit the signal by themselves or stop the emission of the signal from within one of the functions connected to the signal."
msgstr ""

#: ../../source/objects.txt:51
msgid "Receive signals"
msgstr ""

#: ../../source/objects.txt:53
msgid "See :ref:`signals`"
msgstr ""

#: ../../source/objects.txt:56
msgid "Create new signals"
msgstr ""

#: ../../source/objects.txt:58
msgid "New signals can be created by adding them to :attr:`GObject.GObject.__gsignals__`, a dictionary:"
msgstr ""

#: ../../source/objects.txt:61
msgid "When a new signal is created, a method handler can also be defined, it will be called each time the signal is emitted. It is called do_signal_name."
msgstr ""

#: ../../source/objects.txt:75
msgid ":const:`GObject.SIGNAL_RUN_FIRST` indicates that this signal will invoke the object method handler (:meth:`do_my_signal` here) in the first emission stage. Alternatives are :const:`GObject.SIGNAL_RUN_LAST` (the method handler will be invoked in the third emission stage) and :const:`GObject.SIGNAL_RUN_CLEANUP` (invoke the method handler in the last emission stage)."
msgstr ""

#: ../../source/objects.txt:81
msgid "The second part, ``None``, indicates the return type of the signal, usually ``None``."
msgstr ""

#: ../../source/objects.txt:84
msgid "``(int,)`` indicates the signal arguments, here, the signal will only take one argument, whose type is int. This argument type list must end with a comma."
msgstr ""

#: ../../source/objects.txt:88
msgid "Signals can be emitted using :meth:`GObject.GObject.emit`:"
msgstr ""

#: ../../source/objects.txt:96
msgid "Properties"
msgstr ""

#: ../../source/objects.txt:97
msgid "One of GObject's nice features is its generic get/set mechanism for object properties. Each class inherited from :class:`GObject.GObject` can define new properties. Each property has a type which never changes (e.g. str, float, int...). For instance, they are used for :class:`Gtk.Button` where there is a \"label\" property which contains the text of the button."
msgstr ""

#: ../../source/objects.txt:104
msgid "Use existing properties"
msgstr ""

#: ../../source/objects.txt:106
msgid "The class :class:`GObject.GObject` provides several useful functions to manage existing properties, :func:`GObject.GObject.get_property` and :func:`GObject.GObject.set_property`."
msgstr ""

#: ../../source/objects.txt:109
msgid "Some properties also have functions dedicated to them, called getter and setter. For the property \"label\" of a button, there are two functions to get and set them, :func:`Gtk.Button.get_label` and :func:`Gtk.Button.set_label`."
msgstr ""

#: ../../source/objects.txt:114
msgid "Create new properties"
msgstr ""

#: ../../source/objects.txt:116
msgid "A property is defined with a name and a type. Even if Python itself is dynamically typed, you can't change the type of a property once it is defined. A property can be created using :class:`GObject.Property`."
msgstr ""

#: ../../source/objects.txt:131
msgid "Properties can also be read-only, if you want some properties to be readable but not writable. To do so, you can add some flags to the property definition, to control read/write access. Flags are :const:`GObject.PARAM_READABLE` (only read access for external code), :const:`GObject.PARAM_WRITABLE` (only write access), :const:`GObject.PARAM_READWRITE` (public):"
msgstr ""

#: ../../source/objects.txt:146
msgid "You can also define new read-only properties with a new method decorated with :class:`GObject.Property`:"
msgstr ""

#: ../../source/objects.txt:162
msgid "You can get this property using:"
msgstr ""

#: ../../source/objects.txt:170
msgid "The API of :class:`GObject.Property` is similar to the builtin :py:func:`property`. You can create property setter in a way similar to Python property:"
msgstr ""

#: ../../source/objects.txt:191
msgid "There is also a way to define minimum and maximum values for numbers, using a more verbose form:"
msgstr ""

#: ../../source/objects.txt:227
msgid "Properties must be defined in :attr:`GObject.GObject.__gproperties__`, a dictionary, and handled in do_get_property and do_set_property."
msgstr ""

#: ../../source/objects.txt:231
msgid "Watch properties"
msgstr ""

#: ../../source/objects.txt:233
msgid "When a property is modified, a signal is emitted, whose name is \"notify::property-name\":"
msgstr ""

#: ../../source/objects.txt:248
msgid "Note that you have to use the canonical property name when connecting to the notify signals, as explained in :func:`GObject.Object.signals.notify`. For instance, for a Python property `foo_bar_baz` you would connect to the signal `notify::foo-bar-baz` using"
msgstr ""

#: ../../source/objects.txt:263
msgid "API"
msgstr ""

#: ../../source/objects.txt:269
msgid "Retrieves a property value."
msgstr ""

#: ../../source/objects.txt:273
msgid "Set property *property_name* to *value*."
msgstr ""

#: ../../source/objects.txt:277
msgid "Emit signal *signal_name*. Signal arguments must follow, e.g. if your signal is of type ``(int,)``, it must be emitted with::"
msgstr ""

#: ../../source/objects.txt:284
msgid "This method freezes all the \"notify::\" signals (which are emitted when any property is changed) until the :meth:`thaw_notify` method is called."
msgstr ""

#: ../../source/objects.txt:288
msgid "It recommended to use the *with* statement when calling :meth:`freeze_notify`, that way it is ensured that :meth:`thaw_notify` is called implicitly at the end of the block::"
msgstr ""

#: ../../source/objects.txt:298
msgid "Thaw all the \"notify::\" signals which were thawed by :meth:`freeze_notify`."
msgstr ""

#: ../../source/objects.txt:300
msgid "It is recommended to not call :meth:`thaw_notify` explicitly but use :meth:`freeze_notify` together with the *with* statement."
msgstr ""

#: ../../source/objects.txt:305
msgid "Blocks a handler of an instance so it will not be called during any signal emissions unless :meth:`handler_unblock` is called for that *handler_id*. Thus \"blocking\" a signal handler means to temporarily deactivate it, a signal handler has to be unblocked exactly the same amount of times it has been blocked before to become active again."
msgstr ""

#: ../../source/objects.txt:311
msgid "It is recommended to use :meth:`handler_block` in conjunction with the *with* statement which will call :meth:`handler_unblock` implicitly at the end of the block::"
msgstr ""

#: ../../source/objects.txt:321
msgid "Undoes the effect of :meth:`handler_block`. A blocked handler is skipped during signal emissions and will not be invoked until it has been unblocked exactly the amount of times it has been blocked before."
msgstr ""

#: ../../source/objects.txt:325
msgid "It is recommended to not call :meth:`handler_unblock` explicitly but use :meth:`handler_block` together with the *with* statement."
msgstr ""

#: ../../source/objects.txt:330
msgid "A dictionary where inherited class can define new signals."
msgstr ""

#: ../../source/objects.txt:332
msgid "Each element in the dictionary is a new signal. The key is the signal name. The value is a tuple, with the form::"
msgstr ""

#: ../../source/objects.txt:337
msgid ":const:`GObject.SIGNAL_RUN_FIRST` can be replaced with :const:`GObject.SIGNAL_RUN_LAST` or :const:`GObject.SIGNAL_RUN_CLEANUP`. ``None`` is the return type of the signal. ``(int,)`` is the list of the parameters of the signal, it must end with a comma."
msgstr ""

#: ../../source/objects.txt:346
msgid "The :attr:`__gproperties__` dictionary is a class property where you define the properties of your object. This is not the recommend way to define new properties, the method written above is much less verbose. The benefits of this method is that a property can be defined with more settings, like the minimum or the maximum for numbers."
msgstr ""

#: ../../source/objects.txt:352
msgid "The key is the name of the property"
msgstr ""

#: ../../source/objects.txt:354
msgid "The value is a tuple which describe the property. The number of elements of this tuple depends on its first element but the tuple will always contain at least the following items:"
msgstr ""

#: ../../source/objects.txt:358
msgid "The first element is the property's type (e.g. ``int``, ``float``...)."
msgstr ""

#: ../../source/objects.txt:360
msgid "The second element is the property's nick name, which is a string with a short description of the property. This is generally used by programs with strong introspection capabilities, like the graphical user interface builder `Glade`_."
msgstr ""

#: ../../source/objects.txt:365
msgid "The third one is the property's description or blurb, which is another string with a longer description of the property. Also used by `Glade`_ and similar programs."
msgstr ""

#: ../../source/objects.txt:369
msgid "The last one (which is not necessarily the forth one as we will see later) is the property's flags: :const:`GObject.PARAM_READABLE`, :const:`GObject.PARAM_WRITABLE`, :const:`GObject.PARAM_READWRITE`."
msgstr ""

#: ../../source/objects.txt:373
msgid "The absolute length of the tuple depends on the property type (the first element of the tuple). Thus we have the following situations:"
msgstr ""

#: ../../source/objects.txt:376
msgid "If the type is ``bool`` or ``str``, the forth element is the default value of the property."
msgstr ""

#: ../../source/objects.txt:379
msgid "If the type is ``int`` or ``float``, the forth element is the minimum accepted value, the fifth element is the maximum accepted value and the sixth element is the default value."
msgstr ""

#: ../../source/objects.txt:383
msgid "If the type is not one of these, there is no extra element."
msgstr ""

#: ../../source/objects.txt:388
msgid "Invoke the object method handler in the first emission stage."
msgstr ""

#: ../../source/objects.txt:392
msgid "Invoke the object method handler in the third emission stage."
msgstr ""

#: ../../source/objects.txt:396
msgid "Invoke the object method handler in the last emission stage."
msgstr ""

#: ../../source/objects.txt:400
msgid "The property is readable."
msgstr ""

#: ../../source/objects.txt:404
msgid "The property is writable."
msgstr ""

#: ../../source/objects.txt:408
msgid "The property is readable and writable."
msgstr ""

