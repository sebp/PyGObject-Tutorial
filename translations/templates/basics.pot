# SOME DESCRIPTIVE TITLE.
# Copyright (C) GNU Free Documentation License 1.3
# This file is distributed under the same license as the Python GTK+ 3 Tutorial package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python GTK+ 3 Tutorial 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-01-15 18:53+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/basics.txt:4
msgid "Basics"
msgstr ""

#: ../../source/basics.txt:5
msgid "This section will introduce some of the most important aspects of GTK+."
msgstr ""

#: ../../source/basics.txt:12
msgid "Main loop and Signals"
msgstr ""

#: ../../source/basics.txt:13
msgid "Like most GUI toolkits, GTK+ uses an event-driven programming model. When the user is doing nothing, GTK+ sits in the main loop and waits for input. If the user performs some action - say, a mouse click - then the main loop \"wakes up\" and delivers an event to GTK+."
msgstr ""

#: ../../source/basics.txt:18
msgid "When widgets receive an event, they frequently emit one or more signals. Signals notify your program that \"something interesting happened\" by invoking functions you've connected to the signal. Such functions are commonly known as *callbacks*. When your callbacks are invoked, you would typically take some action - for example, when an Open button is clicked you might display a file chooser dialog. After a callback finishes, GTK+ will return to the main loop and await more user input."
msgstr ""

#: ../../source/basics.txt:28
msgid "A generic example is:"
msgstr ""

#: ../../source/basics.txt:34
msgid "Firstly, *widget* is an instance of a widget we created earlier. Next, the event we are interested in. Each widget has its own particular events which can occur. For instance, if you have a button you usually want to connect to the \"clicked\" event. This means that when the button is clicked, the signal is issued. Thirdly, the *callback* argument is the name of the callback function. It contains the code which runs when signals of the specified type are issued. Finally, the *data* argument includes any data which should be passed when the signal is issued. However, this argument is completely optional and can be left out if not required."
msgstr ""

#: ../../source/basics.txt:46
msgid "The function returns a number that identifies this particular signal-callback pair. It is required to disconnect from a signal such that the callback function will not be called during any future or currently ongoing emissions of the signal it has been connected to."
msgstr ""

#: ../../source/basics.txt:56
msgid "If you have lost the \"handler_id\" for some reason (for example the handlers were installed using :func:`Gtk.Builder.connect_signals`), you can still disconnect a  specific callback using the function :func:`disconnect_by_func`:"
msgstr ""

#: ../../source/basics.txt:64
msgid "Almost all applications will connect to the \"delete-event\" signal of the top-level window. It is emitted if a user requests that a toplevel window is closed. The default handler for this signal destroys the window, but does not terminate the application. Connecting the \"delete-event\" signal to the function :func:`Gtk.main_quit` will result in the desired behaviour."
msgstr ""

#: ../../source/basics.txt:74
msgid "Calling :func:`Gtk.main_quit` makes the main loop inside of :func:`Gtk.main` return."
msgstr ""

#: ../../source/basics.txt:77
msgid "Properties"
msgstr ""

#: ../../source/basics.txt:78
msgid "Properties describe the configuration and state of widgets. As for signals, each widget has its own particular set of properties. For example, a button has the property \"label\" which contains the text of the label widget inside the button. You can specify the name and value of any number of properties as keyword arguments when creating an instance of a widget. To create a label aligned to the right with the text \"Hello World\" and an angle of 25 degrees, use:"
msgstr ""

#: ../../source/basics.txt:89
msgid "which is equivalent to"
msgstr ""

#: ../../source/basics.txt:98
msgid "Instead of using getters and setters you can also get and set the gobject properties through the \"props\" property such as ``widget.props.prop_name = value``. This is equivelent to the more verbose ``widget.get_property(\"prop-name\")`` and ``widget.set_property(\"prop-name\", value)``."
msgstr ""

#: ../../source/basics.txt:103
msgid "To see which properties are available for a widget in the running version of GTK you can \"dir\" the \"props\" property:"
msgstr ""

#: ../../source/basics.txt:110
msgid "This will print in the console the list of properties a Gtk.Box has."
msgstr ""

