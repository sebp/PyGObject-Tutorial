.. _layout:

Layout Containers
=================
While many GUI toolkits require you to precisely place widgets in a window,
using absolute positioning, GTK+ uses a different approach.
Rather than specifying the position and size of each widget in the window,
you can arrange your widgets in rows, columns, and/or tables.
The size of your window can be determined automatically, based on the sizes
of the widgets it contains.
And the sizes of the widgets are, in turn, determined by the amount of text
they contain, or the minimum and maximum sizes that you specify, and/or how
you have requested that the available space should be shared between sets of
widgets. You can perfect your layout by specifying padding distance and
centering values for each of your widgets. GTK+ then uses all this information
to resize and reposition everything sensibly and smoothly when the user
manipulates the window.

GTK+ arranges widgets hierarchically, using *containers*.
They are invisible to the end user and are inserted into a window, or placed
within each other to layout components.
There are two flavours of containers: single-child
containers, which are all descendants of :class:`Gtk.Bin`, and multiple-child
containers, which are descendants of :class:`Gtk.Container`.
The most commonly used are vertical or horizontal boxes
(:class:`Gtk.Box`), tables (:class:`Gtk.Table`) and grids (:class:`Gtk.Grid`).

Boxes
-----

Boxes are invisible containers into which we can pack our widgets.
When packing widgets into a horizontal box, the objects are inserted
horizontally from left to right or right to left depending on whether
:meth:`Gtk.Box.pack_start` or :meth:`Gtk.Box.pack_end` is used.
In a vertical box, widgets are packed from top to bottom or vice versa.
You may use any combination of boxes inside or beside other boxes to create
the desired effect.

Example
^^^^^^^

Let's take a look at a slightly modified version of the extended example with two
buttons.

.. image:: ../images/layout_box_example.png

.. literalinclude:: ../examples/layout_box_example.py
    :linenos:

First, we create a horizontally orientated box container where 6 pixels are
placed between children. This box becomes the child of the top-level window.

.. literalinclude:: ../examples/layout_box_example.py
    :lines: 8-9

Subsequently, we add two different buttons to the box container.

.. literalinclude:: ../examples/layout_box_example.py
    :lines: 11-17

While with :meth:`Gtk.Box.pack_start` widgets are positioned from left to right,
:meth:`Gtk.Box.pack_end` positions them from right to left.

Grid
----
:class:`Gtk.Grid` is a container which arranges its child widgets in rows and
columns, but you do not need to specify the dimensions in the constructor.
Children are added using :meth:`Gtk.Grid.attach`. They can span multiple rows or
columns. It is also possible to add a child next to an existing child, using
:meth:`Gtk.Grid.attach_next_to`.

:class:`Gtk.Grid` can be used like a :class:`Gtk.Box` by just using
:meth:`Gtk.Grid.add`, which will place children next to each other in the
direction determined by the "orientation" property (defaults to
:attr:`Gtk.Orientation.HORIZONTAL`).

Example
^^^^^^^

.. image:: ../images/layout_grid_example.png

.. literalinclude:: ../examples/layout_grid_example.py
    :linenos:

Table
-----

Tables allows us to place widgets in a grid similar to :class:`Gtk.Grid`.

The grid's dimensions need to be specified in the :class:`Gtk.Table` constructor.
To place a widget into a box, use :meth:`Gtk.Table.attach`.

:meth:`Gtk.Table.set_row_spacing` and
:meth:`Gtk.Table.set_col_spacing` set the spacing between the rows at the
specified row or column. Note that for columns, the space goes to the right
of the column, and for rows, the space goes below the row.

You can also set a consistent spacing for all rows and/or columns with
:meth:`Gtk.Table.set_row_spacings` and :meth:`Gtk.Table.set_col_spacings`.
Note that with these calls, the last row and last column do not get any spacing.

Example
^^^^^^^

.. image:: ../images/layout_table_example.png

.. literalinclude:: ../examples/layout_table_example.py
    :linenos:

ListBox
-------

A :class:`Gtk.ListBox` is a vertical container that contains :class:`Gtk.ListBoxRow`
children. These rows can by dynamically sorted and filtered, and headers can be
added dynamically depending on the row content. It also allows keyboard and
mouse navigation and selection like a typical list.

Using :class:`Gtk.ListBox` is often an alternative to :class:`Gtk.TreeView`, especially
when the list contents has a more complicated layout than what is allowed by a
:class:`Gtk.CellRenderer`, or when the contents is interactive (i.e. has a button
in it).

Although a :class:`Gtk.ListBox` must have only :class:`Gtk.ListBoxRow` children you can
add any kind of widget to it via :meth:`Gtk.Container.add`, and a
:class:`Gtk.ListBoxRow` widget will automatically be inserted between the list and
the widget.

Example
^^^^^^^

.. image:: ../images/listbox_example.png

.. literalinclude:: ../examples/layout_listbox_example.py
    :linenos:

Stack and StackSwitcher
-----------------------

A :class:`Gtk.Stack` is a container which only shows one of its children at a
time. In contrast to :class:`Gtk.Notebook`, :class:`Gtk.Stack` does not provide
a means for users to change the visible child. Instead, the
:class:`Gtk.StackSwitcher` widget can be used with :class:`Gtk.Stack` to
provide this functionality.

Transitions between pages can be animated as slides or fades. This can be
controlled with :meth:`Gtk.Stack.set_transition_type`. These animations respect
the "gtk-enable-animations" setting.

Transition speed can be adjusted with :meth:`Gtk.Stack.set_transition_duration`

The :class:`Gtk.StackSwitcher` widget acts as a controller for a
:class:`Gtk.Stack`; it shows a row of buttons to switch between the various
pages of the associated stack widget.

All the content for the buttons comes from the child properties of the
:class:`Gtk.Stack`.

It is possible to associate multiple :class:`Gtk.StackSwitcher` widgets with
the same :class:`Gtk.Stack` widget.

Example
^^^^^^^

.. image:: ../images/stack_example.png

.. literalinclude:: ../examples/layout_stack_example.py
    :linenos:
